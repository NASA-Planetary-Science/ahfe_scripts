# this module contains per-file corrections for the Apollo HFE data, including both
# the 2005 NSSDC data and the 2018 Nagihara et al. data converted to an intermediate
# format equivalent to the NSSDC data.

import numpy as np
import pandas as pd


def a15p1_1_cleanup(data):

    """ This file presents the first and most extensive example of the 'bit flip' or 'rollover'
	phenomenon.56

	Manually assign rollover bins to data.

	Note: Values >0 are never corrected. These have been flagged with a comment.

	Note: The ~ few data points below zero are always a little bit ambiguous as
		   to which correction to use. I have assigned these corrections using
		   "best fit" by eye. Such points have been flagged with a comment. You may
		   wish to omit them from analysis.
	"""
    mission, probe, sensor = "a15", "p1", 1
    dT_init = np.array(data[mission][probe][sensor]["dT"]).shape[0]

    # default corrected values to Hills' missing data flag.

    data[mission][probe][sensor]["dT_corr"] = pd.Series(
        -9999 * np.ones(dT_init, dtype=np.float32),
        index=data[mission][probe][sensor].index,
    )

    # only correct data not already marked as missing. This is basically to prevent
    # human error via misrecognition at intermediate steps.

    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0
    dT = data[mission][probe][sensor]["dT"].loc[index].values
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # the data points in this file only appear to lie within this range of binary orders of
    # magnitude. data in other files sometimes exceed this range.

    bins = np.array([-2.0 / 2 ** n for n in range(10)])

    dT[0:31] = 2 * bins[1] - dT[0:31]
    dT[31:150] = 2 * bins[0] - dT[31:150]
    dT[150:208] = 2 * bins[1] - dT[150:208]
    dT[208:229] = 2 * bins[2] - dT[208:229]
    dT[229:235] = 2 * bins[3] - dT[229:235]
    dT[235:238] = 2 * bins[4] - dT[235:238]
    dT[238:239] = 2 * bins[5] - dT[238:239]
    dT[239:240] = 2 * bins[6] - dT[239:240]
    dT[240:241] = 2 * bins[7] - dT[240:241]
    dT[1494:1495] = dT[1494:1495]  # Ambiguous.
    flags[1494:1495] += 0b10
    dT[1495:1496] = 2 * bins[-1] - dT[1495:1496]
    dT[1496:1499] = 2 * bins[-2] - dT[1496:1499]
    dT[1499:1504] = 2 * bins[-3] - dT[1499:1504]
    dT[1504:1511] = 2 * bins[-4] - dT[1504:1511]
    dT[1511:1530] = 2 * bins[-5] - dT[1511:1530]
    dT[1530:1569] = 2 * bins[-6] - dT[1530:1569]
    dT[1569:1648] = 2 * bins[-7] - dT[1569:1648]
    dT[1648:1954] = 2 * bins[-8] - dT[1648:1954]
    dT[1954:2415] = 2 * bins[-9] - dT[1954:2415]
    dT[2415:2447] = 2 * bins[-8] - dT[2415:2447]
    dT[2447:2459] = 2 * bins[-7] - dT[2447:2459]
    dT[2459:2464] = 2 * bins[-6] - dT[2459:2464]
    dT[2464:2467] = 2 * bins[-5] - dT[2464:2467]
    dT[2467:2468] = 2 * bins[-3] - dT[2467:2468]  # Ambiguous.
    dT[2468:2990] = dT[2468:2990]  # >0
    dT[2990:2991] = dT[2990:2991]  # Ambiguous.
    flags[2990:2991] += 0b10
    dT[2991:2992] = 2 * bins[6] - dT[2991:2992]  # Ambiguous.
    flags[2991:2992] += 0b10
    dT[2992:2994] = 2 * bins[5] - dT[2992:2994]  # Slightly ambiguous.
    flags[2992:2994] += 0b10
    dT[2994:2999] = 2 * bins[4] - dT[2994:2999]
    dT[2999:3008] = 2 * bins[3] - dT[2999:3008]
    dT[3008:3028] = 2 * bins[2] - dT[3008:3028]
    dT[3028:3090] = 2 * bins[1] - dT[3028:3090]
    dT[3090:3146] = 2 * bins[0] - dT[3090:3146]
    dT[3146:3228] = 2 * bins[1] - dT[3146:3228]
    dT[3228:3250] = 2 * bins[2] - dT[3228:3250]
    dT[3250:3258] = 2 * bins[3] - dT[3250:3258]
    dT[3258:3263] = 2 * bins[4] - dT[3258:3263]
    dT[3263:3266] = 2 * bins[5] - dT[3263:3266]
    dT[3266:3267] = 2 * bins[6] - dT[3266:3267]  # Ambiguous.
    flags[3266:3267] += 0b10
    dT[3267:3760] = dT[3267:3760]  # >0
    dT[3760:3761] = 2 * bins[7] - dT[3760:3761]  # Ambiguous.
    flags[3760:3761] += 0b10
    dT[3761:3762] = 2 * bins[6] - dT[3761:3762]  # Ambiguous.
    flags[3761:3762] += 0b10
    dT[3762:3764] = 2 * bins[5] - dT[3762:3764]
    dT[3764:3767] = 2 * bins[4] - dT[3764:3767]
    dT[3767:3776] = 2 * bins[3] - dT[3767:3776]
    dT[3776:3793] = 2 * bins[2] - dT[3776:3793]
    dT[3793:3843] = 2 * bins[1] - dT[3793:3843]
    dT[3843:3981] = 2 * bins[0] - dT[3843:3981]
    dT[3981:4036] = 2 * bins[1] - dT[3981:4036]
    dT[4036:4050] = 2 * bins[2] - dT[4036:4050]
    dT[4050:4056] = 2 * bins[3] - dT[4050:4056]
    dT[4056:4059] = 2 * bins[4] - dT[4056:4059]
    dT[4059:4061] = 2 * bins[5] - dT[4059:4061]  # Slightly ambiguous.
    flags[4059:4061] += 0b10
    dT[4061:4062] = 2 * bins[6] - dT[4061:4062]  # Slightly ambiguous.
    flags[4061:4062] += 0b10
    dT[4062:4063] = 2 * bins[8] - dT[4062:4063]  # Ambiguous
    dT[4063:4524] = dT[4063:4524]  # >0
    dT[4524:4525] = 2 * bins[-1] - dT[4524:4525]  # Very ambiguous.
    flags[4524:4525] += 0b10
    dT[4525:4526] = 2 * bins[-4] - dT[4525:4526]  # Ambiguous.
    flags[4525:4526] += 0b10
    dT[4526:4527] = 2 * bins[-5] - dT[4526:4527]
    dT[4527:4529] = 2 * bins[-5] - dT[4527:4529]
    dT[4529:4533] = 2 * bins[-6] - dT[4529:4533]
    dT[4533:4542] = 2 * bins[-7] - dT[4533:4542]
    dT[4542:4559] = 2 * bins[-8] - dT[4542:4559]
    dT[4559:4601] = 2 * bins[-9] - dT[4559:4601]
    dT[4601:4775] = 2 * bins[0] - dT[4601:4775]
    dT[4775:4821] = 2 * bins[1] - dT[4775:4821]
    dT[4821:4833] = 2 * bins[2] - dT[4821:4833]
    dT[4833:4840] = 2 * bins[3] - dT[4833:4840]
    dT[4840:4845] = 2 * bins[4] - dT[4840:4845]
    dT[4845:4847] = 2 * bins[5] - dT[4845:4847]
    dT[4847:4848] = 2 * bins[6] - dT[4847:4848]  # Slightly ambiguous.
    dT[4848:4849] = 2 * bins[7] - dT[4848:4849]  # Slightly ambiguous.
    flags[4848:4849] += 0b10
    dT[4849:5295] = dT[4849:5295]  # >0
    dT[5295:5296] = 2 * bins[-3] - dT[5295:5296]  # Ambiguous.
    flags[5295:5296] += 0b10
    dT[5296:5297] = 2 * bins[-4] - dT[5296:5297]  # Ambiguous.
    flags[5296:5297] += 0b10
    dT[5297:5299] = 2 * bins[-5] - dT[5297:5299]
    dT[5299:5303] = 2 * bins[-6] - dT[5299:5303]
    dT[5303:5310] = 2 * bins[-7] - dT[5303:5310]
    dT[5310:5327] = 2 * bins[-8] - dT[5310:5327]
    dT[5327:5364] = 2 * bins[-9] - dT[5327:5364]
    dT[5364:5569] = 2 * bins[0] - dT[5364:5569]
    dT[5569:5605] = 2 * bins[1] - dT[5569:5605]
    dT[5605:5619] = 2 * bins[2] - dT[5605:5619]
    dT[5619:5628] = 2 * bins[3] - dT[5619:5628]
    dT[5628:5635] = 2 * bins[4] - dT[5628:5635]
    dT[5635:5638] = 2 * bins[5] - dT[5635:5638]
    dT[5638:5639] = 2 * bins[6] - dT[5638:5639]  # Ambiguous.
    flags[5638:5639] += 0b10
    dT[5639:5640] = 2 * bins[8] - dT[5639:5640]  # Ambiguous.
    flags[5639:5640] += 0b10
    dT[5640:6056] = dT[5640:6056]  # >0
    dT[6056:6057] = 2 * bins[-1] - dT[6056:6057]  # Very ambiguous.
    flags[6056:6057] += 0b10
    dT[6057:6058] = 2 * bins[-4] - dT[6057:6058]  # Ambiguous.
    flags[6057:6058] += 0b10
    dT[6058:6060] = 2 * bins[-5] - dT[6058:6060]
    dT[6060:6065] = 2 * bins[-6] - dT[6060:6065]
    dT[6065:6071] = 2 * bins[-7] - dT[6065:6071]
    dT[6071:6085] = 2 * bins[-8] - dT[6071:6085]
    dT[6085:6120] = 2 * bins[-9] - dT[6085:6120]
    dT[6120:6327] = 2 * bins[0] - dT[6120:6327]
    dT[6327:6355] = 2 * bins[1] - dT[6327:6355]
    dT[6355:6371] = 2 * bins[2] - dT[6355:6371]
    dT[6371:6381] = 2 * bins[3] - dT[6371:6381]
    dT[6381:6385] = 2 * bins[4] - dT[6381:6385]
    dT[6385:6388] = 2 * bins[5] - dT[6385:6388]
    dT[6388:6390] = 2 * bins[6] - dT[6388:6390]
    dT[6390:6391] = 2 * bins[7] - dT[6390:6391]
    dT[6391:6392] = 2 * bins[8] - dT[6391:6392]  # Ambiguous.
    flags[6391:6392] += 0b10
    dT[6392:7066] = dT[6392:7066]  # >0
    dT[7066:7067] = 2 * bins[-3] - dT[7066:7067]  # Ambiguous.
    flags[7066:7067] += 0b10
    dT[7067:7068] = 2 * bins[-4] - dT[7067:7068]  # Ambiguous.
    flags[7067:7068] += 0b10
    dT[7068:7070] = 2 * bins[-5] - dT[7068:7070]
    dT[7070:7074] = 2 * bins[-6] - dT[7070:7074]
    dT[7074:7081] = 2 * bins[-7] - dT[7074:7081]
    dT[7081:7096] = 2 * bins[-8] - dT[7081:7096]
    dT[7096:7132] = 2 * bins[-9] - dT[7096:7132]
    dT[7132:7355] = 2 * bins[0] - dT[7132:7355]
    dT[7355:7380] = 2 * bins[1] - dT[7355:7380]
    dT[7380:7398] = 2 * bins[2] - dT[7380:7398]
    dT[7398:7411] = 2 * bins[3] - dT[7398:7411]
    dT[7411:7419] = 2 * bins[4] - dT[7411:7419]
    dT[7419:7421] = 2 * bins[5] - dT[7419:7421]
    dT[7421:7424] = 2 * bins[6] - dT[7421:7424]
    dT[7424:7425] = 2 * bins[-3] - dT[7424:7425]  # Ambiguous.
    flags[7424:7425] += 0b10
    dT[7425:8154] = dT[7425:8154]  # >0
    dT[8154:8155] = 2 * bins[-1] - dT[8154:8155]  # Ambiguous.
    flags[8154:8155] += 0b10
    dT[8155:8156] = 2 * bins[-4] - dT[8155:8156]  # Ambiguous.
    flags[8155:8156] += 0b10
    dT[8156:8158] = 2 * bins[-5] - dT[8156:8158]
    dT[8158:8162] = 2 * bins[-6] - dT[8158:8162]
    dT[8162:8169] = 2 * bins[-7] - dT[8162:8169]
    dT[8169:8186] = 2 * bins[-8] - dT[8169:8186]
    dT[8186:8220] = 2 * bins[-9] - dT[8186:8220]
    dT[8220:8463] = 2 * bins[0] - dT[8220:8463]
    dT[8463:8488] = 2 * bins[1] - dT[8463:8488]
    dT[8488:8508] = 2 * bins[2] - dT[8488:8508]
    dT[8508:8521] = 2 * bins[3] - dT[8508:8521]
    dT[8521:8528] = 2 * bins[4] - dT[8521:8528]
    dT[8528:8531] = 2 * bins[5] - dT[8528:8531]
    dT[8531:8533] = 2 * bins[6] - dT[8531:8533]
    dT[8533:8534] = 2 * bins[7] - dT[8533:8534]
    dT[8534:8535] = 2 * bins[8] - dT[8534:8535]  # Ambiguous.
    flags[8534:8535] += 0b10
    dT[8535:8911] = dT[8535:8911]  # >0
    dT[8911:8912] = 2 * bins[-1] - dT[8911:8912]  # Ambiguous.
    flags[8911:8912] += 0b10
    dT[8912:8913] = 2 * bins[-4] - dT[8912:8913]  # Ambiguous.
    flags[8912:8913] += 0b10
    dT[8913:8915] = 2 * bins[-5] - dT[8913:8915]
    dT[8915:8919] = 2 * bins[-6] - dT[8915:8919]
    dT[8919:8927] = 2 * bins[-7] - dT[8919:8927]
    dT[8927:8943] = 2 * bins[-8] - dT[8927:8943]
    dT[8943:8977] = 2 * bins[1] - dT[8943:8977]
    dT[8977:9217] = 2 * bins[0] - dT[8977:9217]
    dT[9217:9247] = 2 * bins[1] - dT[9217:9247]
    dT[9247:9267] = 2 * bins[2] - dT[9247:9267]
    dT[9267:9280] = 2 * bins[3] - dT[9267:9280]
    dT[9280:9288] = 2 * bins[4] - dT[9280:9288]
    dT[9288:9292] = 2 * bins[5] - dT[9288:9292]
    dT[9292:9294] = 2 * bins[6] - dT[9292:9294]
    dT[9294:9295] = 2 * bins[7] - dT[9294:9295]  # Ambiguous.
    flags[9294:9295] += 0b10
    dT[9295:9296] = 2 * bins[-1] - dT[9295:9296]  # Ambiguous.
    flags[9295:9296] += 0b10
    dT[9296:9670] = dT[9296:9670]  # >0
    dT[9670:9671] = 2 * bins[-3] - dT[9670:9671]  # Ambiguous.
    flags[9670:9671] += 0b10
    dT[9671:9672] = 2 * bins[-4] - dT[9671:9672]  # Ambiguous.
    flags[9671:9672] += 0b10
    dT[9672:9673] = 2 * bins[-5] - dT[9672:9673]
    dT[9673:9677] = 2 * bins[-6] - dT[9673:9677]
    dT[9677:9686] = 2 * bins[-7] - dT[9677:9686]
    dT[9686:9705] = 2 * bins[-8] - dT[9686:9705]
    dT[9705:9739] = 2 * bins[-9] - dT[9705:9739]
    dT[9739:9975] = 2 * bins[0] - dT[9739:9975]
    dT[9975:10000] = 2 * bins[1] - dT[9975:10000]
    dT[10000:10020] = 2 * bins[2] - dT[10000:10020]
    dT[10020:10032] = 2 * bins[3] - dT[10020:10032]
    dT[10032:10039] = 2 * bins[4] - dT[10032:10039]
    dT[10039:10043] = 2 * bins[5] - dT[10039:10043]
    dT[10043:10044] = 2 * bins[7] - dT[10043:10044]  # Ambiguous.
    flags[10043:10044] += 0b10
    dT[10044:10427] = dT[10044:10427]  # >0
    dT[10427:10428] = 2 * bins[-3] - dT[10427:10428]  # Ambiguous.
    flags[10427:10428] += 0b10
    dT[10428:10430] = 2 * bins[-5] - dT[10428:10430]
    dT[10430:10434] = 2 * bins[-6] - dT[10430:10434]
    dT[10434:10442] = 2 * bins[-7] - dT[10434:10442]
    dT[10442:10460] = 2 * bins[-8] - dT[10442:10460]
    dT[10460:10496] = 2 * bins[-9] - dT[10460:10496]
    dT[10496:10728] = 2 * bins[0] - dT[10496:10728]
    dT[10728:10754] = 2 * bins[1] - dT[10728:10754]
    dT[10754:10775] = 2 * bins[2] - dT[10754:10775]
    dT[10775:10788] = 2 * bins[3] - dT[10775:10788]
    dT[10788:10795] = 2 * bins[4] - dT[10788:10795]
    dT[10795:10799] = 2 * bins[5] - dT[10795:10799]
    dT[10799:10800] = 2 * bins[6] - dT[10799:10800]
    dT[10800:10801] = 2 * bins[7] - dT[10800:10801]  # Ambiguous.
    flags[10800:10801] += 0b10
    dT[10801:10802] = 2 * bins[8] - dT[10801:10802]  # Ambiguous.
    flags[10801:10802] += 0b10
    dT[10802:10803] = 2 * bins[9] - dT[10802:10803]  # Ambiguous.
    flags[10802:10803] += 0b10
    dT[10803:11180] = dT[10803:11180]  # >0
    dT[11180:11181] = 2 * bins[-4] - dT[11180:11181]  # Ambiguous.
    flags[11180:11181] += 0b10
    dT[11181:11183] = 2 * bins[-5] - dT[11181:11183]
    dT[11183:11187] = 2 * bins[-6] - dT[11183:11187]
    dT[11187:11195] = 2 * bins[-7] - dT[11187:11195]
    dT[11195:11213] = 2 * bins[-8] - dT[11195:11213]
    dT[11213:11250] = 2 * bins[-9] - dT[11213:11250]
    dT[11250:11494] = 2 * bins[0] - dT[11250:11494]
    dT[11494:11526] = 2 * bins[1] - dT[11494:11526]
    dT[11526:11541] = 2 * bins[2] - dT[11526:11541]
    dT[11541:11554] = 2 * bins[3] - dT[11541:11554]
    dT[11554:11561] = 2 * bins[4] - dT[11554:11561]
    dT[11561:11565] = 2 * bins[5] - dT[11561:11565]
    dT[11565:11567] = 2 * bins[6] - dT[11565:11567]
    dT[11567:11568] = 2 * bins[7] - dT[11567:11568]  # Ambiguous.
    flags[11567:11568] += 0b10
    dT[11568:11569] = 2 * bins[8] - dT[11568:11569]  # Ambiguous.
    flags[11568:11569] += 0b10
    dT[11569:11961] = dT[11569:11961]  # >0
    dT[11961:11962] = 2 * bins[-3] - dT[11961:11962]  # Ambiguous.
    flags[11961:11962] += 0b10
    dT[11962:11963] = 2 * bins[-4] - dT[11962:11963]  # Ambiguous.
    flags[11962:11963] += 0b10
    dT[11963:11965] = 2 * bins[-5] - dT[11963:11965]
    dT[11965:11968] = 2 * bins[-6] - dT[11965:11968]
    dT[11968:11976] = 2 * bins[-7] - dT[11968:11976]
    dT[11976:11993] = 2 * bins[-8] - dT[11976:11993]
    dT[11993:12033] = 2 * bins[-9] - dT[11993:12033]
    dT[12033:12246] = 2 * bins[0] - dT[12033:12246]
    dT[12246:12275] = 2 * bins[1] - dT[12246:12275]
    dT[12275:12293] = 2 * bins[2] - dT[12275:12293]
    dT[12293:12305] = 2 * bins[3] - dT[12293:12305]
    dT[12305:12315] = 2 * bins[4] - dT[12305:12315]
    dT[12315:12318] = 2 * bins[5] - dT[12315:12318]
    dT[12318:12320] = 2 * bins[6] - dT[12318:12320]
    dT[12320:12321] = 2 * bins[7] - dT[12320:12321]  # Ambiguous.
    flags[12320:12321] += 0b10
    dT[12321:12730] = dT[12321:12730]  # >0
    dT[12730:12731] = 2 * bins[-3] - dT[12730:12731]  # Ambiguous.
    flags[12730:12731] += 0b10
    dT[12731:12732] = 2 * bins[-4] - dT[12731:12732]  # Ambiguous.
    flags[12731:12732] += 0b10
    dT[12732:12733] = 2 * bins[-5] - dT[12732:12733]  # Ambiguous.
    flags[12732:12733] += 0b10
    dT[12733:12737] = 2 * bins[-6] - dT[12733:12737]
    dT[12737:12744] = 2 * bins[-7] - dT[12737:12744]
    dT[12744:12761] = 2 * bins[-8] - dT[12744:12761]
    dT[12761:12798] = 2 * bins[-9] - dT[12761:12798]
    dT[12798:13003] = 2 * bins[0] - dT[12798:13003]
    dT[13003:13033] = 2 * bins[1] - dT[13003:13033]
    dT[13033:13049] = 2 * bins[2] - dT[13033:13049]
    dT[13049:13059] = 2 * bins[3] - dT[13049:13059]
    dT[13059:13065] = 2 * bins[4] - dT[13059:13065]
    dT[13065:13068] = 2 * bins[5] - dT[13065:13068]
    dT[13068:13069] = 2 * bins[6] - dT[13068:13069]
    dT[13069:13070] = 2 * bins[7] - dT[13069:13070]  # Ambiguous.
    flags[13069:13070] += 0b10
    dT[13070:13071] = 2 * bins[8] - dT[13070:13071]  # Very ambiguous.
    flags[13070:13071] += 0b10
    dT[13071:13569] = dT[13071:13569]  # >0
    dT[13569:13570] = 2 * bins[-3] - dT[13569:13570]  # Ambiguous.
    flags[13569:13570] += 0b10
    dT[13570:13571] = 2 * bins[-4] - dT[13570:13571]  # Ambiguous.
    flags[13570:13571] += 0b10
    dT[13571:13573] = 2 * bins[-5] - dT[13571:13573]  # Ambiguous.
    flags[13571:13573] += 0b10
    dT[13573:13577] = 2 * bins[-6] - dT[13573:13577]
    dT[13577:13586] = 2 * bins[-7] - dT[13577:13586]
    dT[13586:13602] = 2 * bins[-8] - dT[13586:13602]
    dT[13602:13639] = 2 * bins[-9] - dT[13602:13639]
    dT[13639:13846] = 2 * bins[0] - dT[13639:13846]
    dT[13846:13876] = 2 * bins[1] - dT[13846:13876]
    dT[13876:13892] = 2 * bins[2] - dT[13876:13892]
    dT[13892:13902] = 2 * bins[3] - dT[13892:13902]
    dT[13902:13907] = 2 * bins[4] - dT[13902:13907]
    dT[13907:13910] = 2 * bins[5] - dT[13907:13910]
    dT[13910:13912] = 2 * bins[6] - dT[13910:13912]
    dT[13912:13913] = 2 * bins[8] - dT[13912:13913]  # Ambiguous.
    flags[13912:13913] += 0b10
    dT[13913:14317] = dT[13913:14317]  # >0
    dT[14317:14318] = 2 * bins[-3] - dT[14317:14318]  # Ambiguous.
    flags[14317:14318] += 0b10
    dT[14318:14320] = 2 * bins[-5] - dT[14318:14320]
    dT[14320:14324] = 2 * bins[-6] - dT[14320:14324]
    dT[14324:14332] = 2 * bins[-7] - dT[14324:14332]
    dT[14332:14348] = 2 * bins[-8] - dT[14332:14348]
    dT[14348:14382] = 2 * bins[-9] - dT[14348:14382]
    dT[14382:14596] = 2 * bins[0] - dT[14382:14596]
    dT[14596:14624] = 2 * bins[1] - dT[14596:14624]
    dT[14624:14640] = 2 * bins[2] - dT[14624:14640]
    dT[14640:14651] = 2 * bins[3] - dT[14640:14651]
    dT[14651:14657] = 2 * bins[4] - dT[14651:14657]
    dT[14657:14660] = 2 * bins[5] - dT[14657:14660]
    dT[14660:14662] = 2 * bins[6] - dT[14660:14662]
    dT[14662:14663] = 2 * bins[7] - dT[14662:14663]  # Ambiguous.
    flags[14662:14663] += 0b10
    dT[14663:14664] = 2 * bins[-1] - dT[14663:14664]  # Ambiguous.
    flags[14663:14664] += 0b10
    dT[14664:15069] = dT[14664:15069]  # >0
    dT[15069:15070] = 2 * bins[-2] - dT[15069:15070]  # Ambiguous.
    flags[15069:15070] += 0b10
    dT[15070:15071] = 2 * bins[-4] - dT[15070:15071]  # Ambiguous.
    flags[15070:15071] += 0b10
    dT[15071:15073] = 2 * bins[-5] - dT[15071:15073]
    dT[15073:15076] = 2 * bins[-6] - dT[15073:15076]
    dT[15076:15084] = 2 * bins[-7] - dT[15076:15084]
    dT[15084:15100] = 2 * bins[2] - dT[15084:15100]
    dT[15100:15138] = 2 * bins[1] - dT[15100:15138]
    dT[15138:15353] = 2 * bins[0] - dT[15138:15353]
    dT[15353:15380] = 2 * bins[1] - dT[15353:15380]
    dT[15380:15397] = 2 * bins[2] - dT[15380:15397]
    dT[15397:15409] = 2 * bins[3] - dT[15397:15409]
    dT[15409:15415] = 2 * bins[4] - dT[15409:15415]
    dT[15415:15419] = 2 * bins[5] - dT[15415:15419]
    dT[15419:15420] = 2 * bins[6] - dT[15419:15420]  # Ambiguous.
    flags[15419:15420] += 0b10
    dT[15420:15421] = 2 * bins[-3] - dT[15420:15421]  # Ambiguous.
    flags[15420:15421] += 0b10
    dT[15421:15422] = 2 * bins[-2] - dT[15421:15422]  # Ambiguous.
    flags[15421:15422] += 0b10
    dT[15422:15827] = dT[15422:15827]  # >0
    dT[15827:15828] = 2 * bins[-1] - dT[15827:15828]  # Ambiguous
    flags[15827:15828] += 0b10
    dT[15828:15829] = 2 * bins[-4] - dT[15828:15829]  # Ambiguous
    flags[15828:15829] += 0b10
    dT[15829:15831] = 2 * bins[-5] - dT[15829:15831]
    dT[15831:15835] = 2 * bins[-6] - dT[15831:15835]
    dT[15835:15842] = 2 * bins[-7] - dT[15835:15842]
    dT[15842:15859] = 2 * bins[-8] - dT[15842:15859]
    dT[15859:15893] = 2 * bins[-9] - dT[15859:15893]
    dT[15893:16135] = 2 * bins[0] - dT[15893:16135]
    dT[16135:16160] = 2 * bins[1] - dT[16135:16160]
    dT[16160:16182] = 2 * bins[2] - dT[16160:16182]
    dT[16182:16194] = 2 * bins[3] - dT[16182:16194]
    dT[16194:16203] = 2 * bins[4] - dT[16194:16203]
    dT[16203:16206] = 2 * bins[5] - dT[16203:16206]
    dT[16206:16208] = 2 * bins[6] - dT[16206:16208]
    dT[16208:16209] = 2 * bins[7] - dT[16208:16209]  # Ambiguous.
    flags[16208:16209] += 0b10
    dT[16209:16210] = 2 * bins[8] - dT[16209:16210]  # Ambiguous.
    flags[16209:16210] += 0b10
    dT[16210:16594] = dT[16210:16594]  # >0
    dT[16594:16596] = 2 * bins[-5] - dT[16594:16596]
    dT[16596:16599] = 2 * bins[-6] - dT[16596:16599]
    dT[16599:16606] = 2 * bins[-7] - dT[16599:16606]
    dT[16606:16622] = 2 * bins[-8] - dT[16606:16622]
    dT[16622:16654] = 2 * bins[-9] - dT[16622:16654]
    dT[16654:16899] = 2 * bins[0] - dT[16654:16899]
    dT[16899:16928] = 2 * bins[1] - dT[16899:16928]
    dT[16928:16948] = 2 * bins[2] - dT[16928:16948]
    dT[16948:16962] = 2 * bins[3] - dT[16948:16962]
    dT[16962:16969] = 2 * bins[4] - dT[16962:16969]
    dT[16969:16973] = 2 * bins[5] - dT[16969:16973]
    dT[16973:16975] = 2 * bins[-4] - dT[16973:16975]
    dT[16975:16976] = 2 * bins[-3] - dT[16975:16976]  # Ambiguous.
    flags[16975:16976] += 0b10
    dT[16976:16977] = 2 * bins[-3] - dT[16976:16977]  # Ambiguous.
    flags[16976:16977] += 0b10
    dT[16977:16978] = 2 * bins[-2] - dT[16977:16978]  # Ambiguous.
    flags[16977:16978] += 0b10
    dT[16978:16979] = 2 * bins[-1] - dT[16978:16979]  # Ambiguous.
    flags[16978:16979] += 0b10
    dT[16979:17350] = dT[16979:17350]  # >0
    dT[17350:17351] = 2 * bins[-1] - dT[17350:17351]  # Ambiguous.
    flags[17350:17351] += 0b10
    dT[17351:17352] = 2 * bins[-4] - dT[17351:17352]  # Ambiguous.
    flags[17351:17352] += 0b10
    dT[17352:17354] = 2 * bins[-5] - dT[17352:17354]
    dT[17354:17358] = 2 * bins[-6] - dT[17354:17358]
    dT[17358:17365] = 2 * bins[-7] - dT[17358:17365]
    dT[17365:17381] = 2 * bins[-8] - dT[17365:17381]
    dT[17381:17416] = 2 * bins[-9] - dT[17381:17416]
    dT[17416:17633] = 2 * bins[0] - dT[17416:17633]
    dT[17633:17661] = 2 * bins[1] - dT[17633:17661]
    dT[17661:17687] = 2 * bins[2] - dT[17661:17687]
    dT[17687:17702] = 2 * bins[3] - dT[17687:17702]
    dT[17702:17710] = 2 * bins[4] - dT[17702:17710]
    dT[17710:17717] = 2 * bins[5] - dT[17710:17717]
    dT[17717:17719] = 2 * bins[6] - dT[17717:17719]
    dT[17719:17720] = 2 * bins[7] - dT[17719:17720]  # Ambiguous.
    flags[17719:17720] += 0b10
    dT[17720:17721] = 2 * bins[9] - dT[17720:17721]  # Ambiguous.
    flags[17720:17721] += 0b10
    dT[17721:18108] = dT[17721:18108]  # >0
    dT[18108:18109] = 2 * bins[-3] - dT[18108:18109]  # Ambiguous.
    flags[18108:18109] += 0b10
    dT[18109:18112] = 2 * bins[-5] - dT[18109:18112]
    dT[18112:18116] = 2 * bins[-6] - dT[18112:18116]
    dT[18116:18124] = 2 * bins[-7] - dT[18116:18124]
    dT[18124:18140] = 2 * bins[-8] - dT[18124:18140]
    dT[18140:18175] = 2 * bins[-9] - dT[18140:18175]
    dT[18175:18427] = 2 * bins[0] - dT[18175:18427]
    dT[18427:18454] = 2 * bins[1] - dT[18427:18454]
    dT[18454:18477] = 2 * bins[2] - dT[18454:18477]
    dT[18477:18491] = 2 * bins[3] - dT[18477:18491]
    dT[18491:18499] = 2 * bins[4] - dT[18491:18499]
    dT[18499:18504] = 2 * bins[5] - dT[18499:18504]
    dT[18504:18506] = 2 * bins[-4] - dT[18504:18506]
    dT[18506:18507] = 2 * bins[-3] - dT[18506:18507]  # Ambiguous.
    flags[18506:18507] += 0b10
    dT[18507:18508] = 2 * bins[-2] - dT[18507:18508]  # Ambiguous.
    flags[18507:18508] += 0b10
    dT[18508:18891] = dT[18508:18891]  # >0
    dT[18891:18892] = 2 * bins[-3] - dT[18891:18892]  # Ambiguous.
    flags[18891:18892] += 0b10
    dT[18892:18893] = 2 * bins[-4] - dT[18892:18893]  # Ambiguous.
    flags[18892:18893] += 0b10
    dT[18893:18895] = 2 * bins[-5] - dT[18893:18895]
    dT[18895:18899] = 2 * bins[-6] - dT[18895:18899]
    dT[18899:18906] = 2 * bins[-7] - dT[18899:18906]
    dT[18906:18923] = 2 * bins[-8] - dT[18906:18923]
    dT[18923:18958] = 2 * bins[-9] - dT[18923:18958]
    dT[18958:19241] = 2 * bins[0] - dT[18958:19241]
    dT[19241:19270] = 2 * bins[1] - dT[19241:19270]
    dT[19270:19295] = 2 * bins[2] - dT[19270:19295]
    dT[19295:19316] = 2 * bins[3] - dT[19295:19316]
    dT[19316:19324] = 2 * bins[4] - dT[19316:19324]
    dT[19324:19328] = 2 * bins[5] - dT[19324:19328]
    dT[19328:19329] = 2 * bins[6] - dT[19328:19329]  # Ambiguous.
    flags[19328:19329] += 0b10
    dT[19329:19330] = 2 * bins[7] - dT[19329:19330]  # Ambiguous.
    flags[19329:19330] += 0b10
    dT[19330:19331] = 2 * bins[8] - dT[19330:19331]  # Ambiguous.
    flags[19330:19331] += 0b10
    dT[19331:20124] = dT[19331:20124]  # >0
    dT[20124:20125] = 2 * bins[-3] - dT[20124:20125]  # Ambiguous.
    flags[20124:20125] += 0b10
    dT[20125:20126] = 2 * bins[-4] - dT[20125:20126]  # Ambiguous.
    flags[20125:20126] += 0b10
    dT[20126:20128] = 2 * bins[-5] - dT[20126:20128]  # Ambiguous.
    flags[20126:20128] += 0b10
    dT[20128:20131] = 2 * bins[-6] - dT[20128:20131]
    dT[20131:20140] = 2 * bins[-7] - dT[20131:20140]
    dT[20140:20157] = 2 * bins[-8] - dT[20140:20157]
    dT[20157:20202] = 2 * bins[-9] - dT[20157:20202]
    dT[20202:20452] = 2 * bins[0] - dT[20202:20452]
    dT[20452:20484] = 2 * bins[1] - dT[20452:20484]
    dT[20484:20503] = 2 * bins[2] - dT[20484:20503]
    dT[20503:20517] = 2 * bins[3] - dT[20503:20517]
    dT[20517:20525] = 2 * bins[4] - dT[20517:20525]
    dT[20525:20529] = 2 * bins[5] - dT[20525:20529]
    dT[20529:20531] = 2 * bins[6] - dT[20529:20531]
    dT[20531:20532] = 2 * bins[7] - dT[20531:20532]  # Ambiguous.
    flags[20531:20532] += 0b10
    dT[20532:20533] = 2 * bins[8] - dT[20532:20533]  # Ambiguous.
    flags[20532:20533] += 0b10
    dT[20533:20534] = 2 * bins[9] - dT[20533:20534]  # Ambiguous.
    flags[20533:20534] += 0b10
    dT[20534:20911] = dT[20534:20911]  # >0
    dT[20911:20912] = 2 * bins[-2] - dT[20911:20912]  # Ambiguous.
    flags[20911:20912] += 0b10
    dT[20912:20913] = 2 * bins[-4] - dT[20912:20913]  # Ambiguous.
    flags[20912:20913] += 0b10
    dT[20913:20915] = 2 * bins[-5] - dT[20913:20915]
    dT[20915:20919] = 2 * bins[-6] - dT[20915:20919]
    dT[20919:20926] = 2 * bins[-7] - dT[20919:20926]
    dT[20926:20944] = 2 * bins[-8] - dT[20926:20944]
    dT[20944:20982] = 2 * bins[-9] - dT[20944:20982]
    dT[20982:21216] = 2 * bins[0] - dT[20982:21216]
    dT[21216:21243] = 2 * bins[1] - dT[21216:21243]
    dT[21243:21262] = 2 * bins[2] - dT[21243:21262]
    dT[21262:21273] = 2 * bins[3] - dT[21262:21273]
    dT[21273:21280] = 2 * bins[4] - dT[21273:21280]
    dT[21280:21284] = 2 * bins[5] - dT[21280:21284]
    dT[21284:21285] = 2 * bins[-4] - dT[21284:21285]  # Ambiguous.
    flags[21284:21285] += 0b10
    dT[21285:21286] = 2 * bins[-3] - dT[21285:21286]  # Ambiguous.
    flags[21285:21286] += 0b10
    dT[21286:21287] = 2 * bins[-2] - dT[21286:21287]  # Ambiguous.
    flags[21286:21287] += 0b10
    dT[21287:21670] = dT[21287:21670]  # >0
    dT[21670:21671] = 2 * bins[-4] - dT[21670:21671]  # Ambiguous.
    flags[21670:21671] += 0b10
    dT[21671:21673] = 2 * bins[-6] - dT[21671:21673]
    dT[21673:21678] = 2 * bins[-7] - dT[21673:21678]
    dT[21678:21687] = 2 * bins[-8] - dT[21678:21687]
    dT[21687:21708] = 2 * bins[-9] - dT[21687:21708]
    dT[21708:21828] = 2 * bins[0] - dT[21708:21828]
    dT[21828:21844] = 2 * bins[1] - dT[21828:21844]
    dT[21844:21853] = 2 * bins[2] - dT[21844:21853]
    dT[21853:21858] = 2 * bins[3] - dT[21853:21858]
    dT[21858:21861] = 2 * bins[4] - dT[21858:21861]
    dT[21861:21863] = 2 * bins[5] - dT[21861:21863]
    dT[21863:21864] = 2 * bins[-4] - dT[21863:21864]  # Ambiguous.
    flags[21863:21864] += 0b10
    dT[21864:21865] = 2 * bins[-3] - dT[21864:21865]  # Ambiguous.
    flags[21864:21865] += 0b10
    dT[21865:22077] = dT[21865:22077]  # >0
    dT[22077:22078] = 2 * bins[-3] - dT[22077:22078]  # Ambiguous.
    flags[22077:22078] += 0b10
    dT[22078:22080] = 2 * bins[-5] - dT[22078:22080]
    dT[22080:22082] = 2 * bins[-6] - dT[22080:22082]
    dT[22082:22086] = 2 * bins[-7] - dT[22082:22086]
    dT[22086:22094] = 2 * bins[-8] - dT[22086:22094]
    dT[22094:22113] = 2 * bins[-9] - dT[22094:22113]
    dT[22113:22221] = 2 * bins[0] - dT[22113:22221]
    dT[22221:22236] = 2 * bins[1] - dT[22221:22236]
    dT[22236:22244] = 2 * bins[2] - dT[22236:22244]
    dT[22244:22249] = 2 * bins[3] - dT[22244:22249]
    dT[22249:22252] = 2 * bins[4] - dT[22249:22252]
    dT[22252:22253] = 2 * bins[-5] - dT[22252:22253]  # Ambiguous.
    flags[22252:22253] += 0b10
    dT[22253:22254] = 2 * bins[-4] - dT[22253:22254]  # Ambiguous.
    flags[22253:22254] += 0b10
    dT[22254:22255] = 2 * bins[-2] - dT[22254:22255]  # Ambiguous.
    flags[22254:22255] += 0b10
    dT[22255:22486] = dT[22255:22486]  # >0
    dT[22486:22487] = 2 * bins[-3] - dT[22486:22487]  # Ambiguous.
    flags[22486:22487] += 0b10
    dT[22487:22488] = 2 * bins[-5] - dT[22487:22488]  # Ambiguous.
    flags[22487:22488] += 0b10
    dT[22488:22492] = 2 * bins[-6] - dT[22488:22492]
    dT[22492:22496] = 2 * bins[-7] - dT[22492:22496]
    dT[22496:22507] = 2 * bins[-8] - dT[22496:22507]
    dT[22507:22526] = 2 * bins[-9] - dT[22507:22526]
    dT[22526:22641] = 2 * bins[0] - dT[22526:22641]
    dT[22641:22659] = 2 * bins[1] - dT[22641:22659]
    dT[22659:22667] = 2 * bins[2] - dT[22659:22667]
    dT[22667:22672] = 2 * bins[3] - dT[22667:22672]
    dT[22672:22674] = 2 * bins[4] - dT[22672:22674]
    dT[22674:22676] = 2 * bins[5] - dT[22674:22676]
    dT[22676:22677] = 2 * bins[6] - dT[22676:22677]  # Very ambiguous.
    flags[22676:22677] += 0b10
    dT[22677:22891] = dT[22677:22891]  # >0
    dT[22891:22892] = 2 * bins[-4] - dT[22891:22892]  # Ambiguous.
    flags[22891:22892] += 0b10
    dT[22892:22893] = 2 * bins[-5] - dT[22892:22893]  # Ambiguous.
    flags[22892:22893] += 0b10
    dT[22893:22897] = 2 * bins[-7] - dT[22893:22897]
    dT[22897:22906] = 2 * bins[-8] - dT[22897:22906]
    dT[22906:22925] = 2 * bins[-9] - dT[22906:22925]
    dT[22925:23043] = 2 * bins[0] - dT[22925:23043]
    dT[23043:23061] = 2 * bins[1] - dT[23043:23061]
    dT[23061:23069] = 2 * bins[2] - dT[23061:23069]
    dT[23069:23074] = 2 * bins[3] - dT[23069:23074]
    dT[23074:23076] = 2 * bins[4] - dT[23074:23076]
    dT[23076:23078] = 2 * bins[5] - dT[23076:23078]
    dT[23078:23079] = 2 * bins[6] - dT[23078:23079]  # Ambiguous.
    flags[23078:23079] += 0b10
    dT[23080:23295] = dT[23080:23295]  # >0
    dT[23296:23297] = 2 * bins[-3] - dT[23296:23297]  # Ambiguous.
    flags[23296:23297] += 0b10
    dT[23297:23298] = 2 * bins[-5] - dT[23297:23298]  # Ambiguous.
    flags[23297:23298] += 0b10
    dT[23298:23300] = 2 * bins[-6] - dT[23298:23300]
    dT[23300:23304] = 2 * bins[-7] - dT[23300:23304]
    dT[23304:23312] = 2 * bins[-8] - dT[23304:23312]
    dT[23312:23331] = 2 * bins[-9] - dT[23312:23331]
    dT[23331:23444] = 2 * bins[0] - dT[23331:23444]
    dT[23444:23458] = 2 * bins[1] - dT[23444:23458]
    dT[23458:23466] = 2 * bins[2] - dT[23458:23466]
    dT[23466:23472] = 2 * bins[3] - dT[23466:23472]
    dT[23472:23475] = 2 * bins[4] - dT[23472:23475]
    dT[23475:23476] = 2 * bins[5] - dT[23475:23476]  # Ambiguous.
    flags[23475:23476] += 0b10
    dT[23476:23477] = 2 * bins[6] - dT[23476:23477]  # Ambiguous.
    flags[23476:23477] += 0b10
    dT[23477:23478] = 2 * bins[7] - dT[23477:23478]  # Ambiguous.
    flags[23477:23478] += 0b10
    dT[23478:23690] = dT[23478:23690]  # >0
    dT[23690:23691] = 2 * bins[-3] - dT[23690:23691]  # Ambiguous.
    flags[23690:23691] += 0b10
    dT[23691:23693] = 2 * bins[-5] - dT[23691:23693]
    dT[23693:23695] = 2 * bins[-6] - dT[23693:23695]
    dT[23695:23703] = 2 * bins[-7] - dT[23695:23703]
    dT[23703:23712] = 2 * bins[-8] - dT[23703:23712]
    dT[23712:23727] = 2 * bins[-9] - dT[23712:23727]
    dT[23727:23843] = 2 * bins[0] - dT[23727:23843]
    dT[23843:23855] = 2 * bins[1] - dT[23843:23855]
    dT[23855:23865] = 2 * bins[2] - dT[23855:23865]
    dT[23865:23871] = 2 * bins[3] - dT[23865:23871]
    dT[23871:23875] = 2 * bins[4] - dT[23871:23875]
    dT[23875:23877] = 2 * bins[5] - dT[23875:23877]
    dT[23877:23878] = 2 * bins[-4] - dT[23877:23878]  # Ambiguous.
    flags[23877:23878] += 0b10
    dT[23878:23879] = 2 * bins[-1] - dT[23878:23879]  # Very ambiguous.
    flags[23878:23879] += 0b10
    dT[23879:24074] = dT[23879:24074]  # >0
    dT[24074:24075] = 2 * bins[-3] - dT[24074:24075]  # Ambiguous.
    flags[24074:24075] += 0b10
    dT[24075:24076] = 2 * bins[-5] - dT[24075:24076]  # Ambiguous.
    flags[24075:24076] += 0b10
    dT[24076:24077] = 2 * bins[-6] - dT[24076:24077]  # Ambiguous.
    flags[24076:24077] += 0b10
    dT[24077:24081] = 2 * bins[-7] - dT[24077:24081]
    dT[24081:24089] = 2 * bins[-8] - dT[24081:24089]
    dT[24089:24106] = 2 * bins[-9] - dT[24089:24106]
    dT[24106:24225] = 2 * bins[0] - dT[24106:24225]
    dT[24225:24239] = 2 * bins[1] - dT[24225:24239]
    dT[24239:24249] = 2 * bins[2] - dT[24239:24249]
    dT[24249:24255] = 2 * bins[3] - dT[24249:24255]
    dT[24255:24259] = 2 * bins[4] - dT[24255:24259]
    dT[24259:24261] = 2 * bins[5] - dT[24259:24261]
    dT[24261:24262] = 2 * bins[7] - dT[24261:24262]  # Ambiguous.
    flags[24261:24262] += 0b10
    dT[24262:24452] = dT[24262:24452]  # >0
    dT[24452:24453] = 2 * bins[-4] - dT[24452:24453]  # Ambiguous.
    flags[24452:24453] += 0b10
    dT[24453:24454] = 2 * bins[-4] - dT[24453:24454]  # Very ambiguous.
    flags[24453:24454] += 0b10
    dT[24454:24455] = 2 * bins[-5] - dT[24454:24455]  # Ambiguous.
    flags[24454:24455] += 0b10
    dT[24455:24457] = 2 * bins[-6] - dT[24455:24457]
    dT[24457:24463] = 2 * bins[-7] - dT[24457:24463]
    dT[24463:24470] = 2 * bins[-8] - dT[24463:24470]
    dT[24470:24488] = 2 * bins[-9] - dT[24470:24488]
    dT[24488:24621] = 2 * bins[0] - dT[24488:24621]
    dT[24621:24635] = 2 * bins[1] - dT[24621:24635]
    dT[24635:24646] = 2 * bins[2] - dT[24635:24646]
    dT[24646:24653] = 2 * bins[3] - dT[24646:24653]
    dT[24653:24657] = 2 * bins[4] - dT[24653:24657]
    dT[24657:24659] = 2 * bins[5] - dT[24657:24659]
    dT[24659:24660] = 2 * bins[6] - dT[24659:24660]  # Ambiguous.
    flags[24659:24660] += 0b10
    dT[24660:24661] = 2 * bins[7] - dT[24660:24661]  # Ambiguous.
    flags[24660:24661] += 0b10
    dT[24661:25315] = dT[24661:25315]  # >0
    dT[25315:25316] = 2 * bins[-4] - dT[25315:25316]  # Ambiguous.
    flags[25315:25316] += 0b10
    dT[25316:25317] = 2 * bins[-5] - dT[25316:25317]  # Ambiguous.
    flags[25316:25317] += 0b10
    dT[25317:25318] = 2 * bins[-6] - dT[25317:25318]  # Ambiguous.
    flags[25317:25318] += 0b10
    dT[25318:25322] = 2 * bins[-7] - dT[25318:25322]
    dT[25322:25330] = 2 * bins[-8] - dT[25322:25330]
    dT[25330:25351] = 2 * bins[-9] - dT[25330:25351]
    dT[25351:25484] = 2 * bins[0] - dT[25351:25484]
    dT[25484:25497] = 2 * bins[1] - dT[25484:25497]
    dT[25497:25509] = 2 * bins[2] - dT[25497:25509]
    dT[25509:25516] = 2 * bins[3] - dT[25509:25516]
    dT[25516:25520] = 2 * bins[4] - dT[25516:25520]
    dT[25520:25522] = 2 * bins[5] - dT[25520:25522]
    dT[25522:25523] = 2 * bins[6] - dT[25522:25523]  # Ambiguous.
    flags[25522:25523] += 0b10
    dT[25523:25524] = 2 * bins[7] - dT[25523:25524]  # Ambiguous.
    flags[25523:25524] += 0b10
    dT[25524:25705] = dT[25524:25705]  # >0
    dT[25705:25706] = 2 * bins[-1] - dT[25705:25706]  # Very ambiguous.
    flags[25705:25706] += 0b10
    dT[25706:25707] = 2 * bins[-5] - dT[25706:25707]  # Ambiguous.
    flags[25706:25707] += 0b10
    dT[25707:25710] = 2 * bins[-6] - dT[25707:25710]
    dT[25710:25714] = 2 * bins[-7] - dT[25710:25714]
    dT[25714:25722] = 2 * bins[-8] - dT[25714:25722]
    dT[25722:25739] = 2 * bins[-9] - dT[25722:25739]
    dT[25739:25861] = 2 * bins[0] - dT[25739:25861]
    dT[25861:25874] = 2 * bins[1] - dT[25861:25874]
    dT[25874:25886] = 2 * bins[2] - dT[25874:25886]
    dT[25886:25897] = 2 * bins[3] - dT[25886:25897]
    dT[25897:25901] = 2 * bins[4] - dT[25897:25901]
    dT[25901:25903] = 2 * bins[5] - dT[25901:25903]
    dT[25903:25904] = 2 * bins[6] - dT[25903:25904]  # Ambiguous.
    flags[25903:25904] += 0b10
    dT[25904:25905] = 2 * bins[7] - dT[25904:25905]  # Ambiguous.
    flags[25904:25905] += 0b10
    dT[25905:26091] = dT[25905:26091]  # >0
    dT[26091:26092] = 2 * bins[-3] - dT[26091:26092]  # Very ambiguous.
    flags[26091:26092] += 0b10
    dT[26092:26093] = 2 * bins[-5] - dT[26092:26093]
    dT[26093:26095] = 2 * bins[-6] - dT[26093:26095]
    dT[26095:26099] = 2 * bins[-7] - dT[26095:26099]
    dT[26099:26106] = 2 * bins[-8] - dT[26099:26106]
    dT[26106:26124] = 2 * bins[-9] - dT[26106:26124]
    dT[26124:26238] = 2 * bins[0] - dT[26124:26238]
    dT[26238:26251] = 2 * bins[1] - dT[26238:26251]
    dT[26251:26262] = 2 * bins[2] - dT[26251:26262]
    dT[26262:26269] = 2 * bins[3] - dT[26262:26269]
    dT[26269:26272] = 2 * bins[4] - dT[26269:26272]
    dT[26272:26274] = 2 * bins[5] - dT[26272:26274]
    dT[26274:26275] = 2 * bins[6] - dT[26274:26275]  # Ambiguous.
    flags[26274:26275] += 0b10
    dT[26275:26276] = 2 * bins[7] - dT[26275:26276]  # Ambiguous.
    flags[26275:26276] += 0b10
    dT[26276:26474] = dT[26276:26474]  # >0
    dT[26474:26475] = 2 * bins[-4] - dT[26474:26475]  # Ambiguous.
    flags[26474:26475] += 0b10
    dT[26475:26476] = 2 * bins[-5] - dT[26475:26476]  # Ambiguous.
    flags[26475:26476] += 0b10
    dT[26476:26478] = 2 * bins[-6] - dT[26476:26478]
    dT[26478:26482] = 2 * bins[-7] - dT[26478:26482]
    dT[26482:26490] = 2 * bins[-8] - dT[26482:26490]
    dT[26490:26508] = 2 * bins[-9] - dT[26490:26508]
    dT[26508:26624] = 2 * bins[0] - dT[26508:26624]
    dT[26624:26638] = 2 * bins[1] - dT[26624:26638]
    dT[26638:26647] = 2 * bins[2] - dT[26638:26647]
    dT[26647:26653] = 2 * bins[3] - dT[26647:26653]
    dT[26653:26657] = 2 * bins[4] - dT[26653:26657]
    dT[26657:26659] = 2 * bins[5] - dT[26657:26659]
    dT[26659:26660] = 2 * bins[-4] - dT[26659:26660]  # Ambiguous.
    flags[26659:26660] += 0b10
    dT[26660:26661] = 2 * bins[-1] - dT[26660:26661]  # Very ambiguous.
    flags[26660:26661] += 0b10
    dT[26661:26880] = dT[26661:26880]  # >0
    dT[26880:26881] = 2 * bins[-4] - dT[26880:26881]  # Ambiguous.
    flags[26880:26881] += 0b10
    dT[26881:26882] = 2 * bins[-5] - dT[26881:26882]  # Ambiguous.
    flags[26881:26882] += 0b10
    dT[26882:26883] = 2 * bins[-6] - dT[26882:26883]
    dT[26883:26888] = 2 * bins[-7] - dT[26883:26888]
    dT[26888:26897] = 2 * bins[-8] - dT[26888:26897]
    dT[26897:26917] = 2 * bins[-9] - dT[26897:26917]
    dT[26917:27018] = 2 * bins[0] - dT[26917:27018]
    dT[27018:27033] = 2 * bins[1] - dT[27018:27033]
    dT[27033:27041] = 2 * bins[2] - dT[27033:27041]
    dT[27041:27046] = 2 * bins[3] - dT[27041:27046]
    dT[27046:27049] = 2 * bins[4] - dT[27046:27049]
    dT[27049:27051] = 2 * bins[-5] - dT[27049:27051]
    dT[27051:27052] = 2 * bins[-3] - dT[27051:27052]  # Ambiguous.
    flags[27051:27052] += 0b10
    dT[27052:27254] = dT[27052:27254]  # >0
    dT[27254:27255] = 2 * bins[-4] - dT[27254:27255]  # Ambiguous.
    flags[27254:27255] += 0b10
    dT[27255:27256] = 2 * bins[-5] - dT[27255:27256]  # Ambiguous.
    flags[27255:27256] += 0b10
    dT[27256:27258] = 2 * bins[-6] - dT[27256:27258]
    dT[27258:27262] = 2 * bins[-7] - dT[27258:27262]
    dT[27262:27270] = 2 * bins[-8] - dT[27262:27270]
    dT[27270:27291] = 2 * bins[-9] - dT[27270:27291]
    dT[27291:27395] = 2 * bins[0] - dT[27291:27395]
    dT[27395:27413] = 2 * bins[1] - dT[27395:27413]
    dT[27413:27423] = 2 * bins[2] - dT[27413:27423]
    dT[27423:27429] = 2 * bins[3] - dT[27423:27429]
    dT[27429:27432] = 2 * bins[4] - dT[27429:27432]
    dT[27432:27433] = 2 * bins[5] - dT[27432:27433]
    dT[27433:27434] = 2 * bins[6] - dT[27433:27434]  # Ambiguous.
    flags[27433:27434] += 0b10
    dT[27434:27435] = 2 * bins[7] - dT[27434:27435]  # Ambiguous.
    flags[27434:27435] += 0b10
    dT[27435:27651] = dT[27435:27651]  # >0
    dT[27651:27652] = 2 * bins[-3] - dT[27651:27652]  # Ambiguous.
    flags[27651:27652] += 0b10
    dT[27652:27653] = 2 * bins[-5] - dT[27652:27653]  # Ambiguous.
    flags[27652:27653] += 0b10
    dT[27653:27655] = 2 * bins[-6] - dT[27653:27655]
    dT[27655:27659] = 2 * bins[-7] - dT[27655:27659]
    dT[27659:27667] = 2 * bins[-8] - dT[27659:27667]
    dT[27667:27687] = 2 * bins[-9] - dT[27667:27687]
    dT[27687:27785] = 2 * bins[0] - dT[27687:27785]
    dT[27785:27803] = 2 * bins[1] - dT[27785:27803]
    dT[27803:27808] = 2 * bins[2] - dT[27803:27808]
    dT[27808:27813] = 2 * bins[3] - dT[27808:27813]
    dT[27813:27815] = 2 * bins[4] - dT[27813:27815]
    dT[27815:27817] = 2 * bins[-5] - dT[27815:27817]
    dT[27817:27818] = 2 * bins[-3] - dT[27817:27818]  # Ambiguous.
    flags[27817:27818] += 0b10
    dT[27818:28032] = dT[27818:28032]  # >0
    dT[28032:28033] = 2 * bins[-4] - dT[28032:28033]  # Ambiguous.
    flags[28032:28033] += 0b10
    dT[28033:28034] = 2 * bins[-5] - dT[28033:28034]  # Ambiguous.
    flags[28033:28034] += 0b10
    dT[28034:28036] = 2 * bins[-6] - dT[28034:28036]
    dT[28036:28040] = 2 * bins[-7] - dT[28036:28040]
    dT[28040:28048] = 2 * bins[-8] - dT[28040:28048]
    dT[28048:28067] = 2 * bins[-9] - dT[28048:28067]
    dT[28067:28173] = 2 * bins[0] - dT[28067:28173]
    dT[28173:28190] = 2 * bins[1] - dT[28173:28190]
    dT[28190:28197] = 2 * bins[2] - dT[28190:28197]
    dT[28197:28202] = 2 * bins[3] - dT[28197:28202]
    dT[28202:28206] = 2 * bins[4] - dT[28202:28206]
    dT[28206:28209] = 2 * bins[-5] - dT[28206:28209]  # Ambiguous.
    flags[28206:28209] += 0b10
    dT[28209:28210] = 2 * bins[-4] - dT[28209:28210]  # Ambiguous.
    flags[28209:28210] += 0b10
    dT[28210:28428] = dT[28210:28428]  # >0
    dT[28428:28429] = 2 * bins[-2] - dT[28428:28429]  # Very ambiguous.
    flags[28428:28429] += 0b10
    dT[28429:28430] = 2 * bins[-4] - dT[28429:28430]  # Ambiguous.
    flags[28429:28430] += 0b10
    dT[28430:28431] = 2 * bins[-5] - dT[28430:28431]
    dT[28431:28433] = 2 * bins[-6] - dT[28431:28433]
    dT[28433:28437] = 2 * bins[-7] - dT[28433:28437]
    dT[28437:28445] = 2 * bins[-8] - dT[28437:28445]
    dT[28445:28463] = 2 * bins[-9] - dT[28445:28463]
    dT[28463:28577] = 2 * bins[0] - dT[28463:28577]
    dT[28577:28591] = 2 * bins[1] - dT[28577:28591]
    dT[28591:28601] = 2 * bins[2] - dT[28591:28601]
    dT[28601:28606] = 2 * bins[3] - dT[28601:28606]
    dT[28606:28609] = 2 * bins[4] - dT[28606:28609]
    dT[28609:28611] = 2 * bins[5] - dT[28609:28611]
    dT[28611:28612] = 2 * bins[7] - dT[28611:28612]  # Ambiguous.
    flags[28611:28612] += 0b10
    dT[28612:28812] = dT[28612:28812]  # >0
    dT[28812:28813] = 2 * bins[-3] - dT[28812:28813]  # Ambiguous.
    flags[28812:28813] += 0b10
    dT[28813:28814] = 2 * bins[-5] - dT[28813:28814]  # Ambiguous.
    flags[28813:28814] += 0b10
    dT[28814:28815] = 2 * bins[-6] - dT[28814:28815]  # Ambiguous.
    flags[28814:28815] += 0b10
    dT[28815:28816] = 2 * bins[-6] - dT[28815:28816]
    dT[28816:28820] = 2 * bins[-7] - dT[28816:28820]
    dT[28820:28828] = 2 * bins[-8] - dT[28820:28828]
    dT[28828:28845] = 2 * bins[-9] - dT[28828:28845]
    dT[28845:28912] = 2 * bins[0] - dT[28845:28912]  # END

    # flag extreme outliers in dT.

    flags[
        [
            1195,
            1756,
            1849,
            12020,
            18727,
            19571,
            23648,
            26106,
            26124,
            26837,
            26858,
            27576,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[[1195, 12020, 16031, 18286, 20656, 22187, 26858, 27576, 27791,]] += 0b1000

    data[mission][probe][sensor].loc[index, "dT_corr"] = dT
    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15_1975p1_1_cleanup(data):

    # missing data exclusion is retained here, though unnecessary for nagihara data

    mission, probe, sensor = "a15_1975", "p1", 1

    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Nagihara data doesn't have the bit flip error.

    # NOTE: Lunar eclipse on May 25. There seems to be an odd spike in average temperature just
    # before it. This has not been flagged.

    # flag extreme outliers in dT.

    flags[[3238, 5797, 7668, 13857, 13862, 13864, 14644, 14648]] += 0b100

    # Flag extreme outliers in T.

    flags[[7668, 8807, 13862, 13864, 14644, 14648, 15240]] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p1_2_cleanup(data):
    mission, probe, sensor = "a15", "p1", 2

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[
        [
            3128,
            6161,
            6938,
            7041,
            12119,
            16132,
            18528,
            18891,
            19227,
            19262,
            23074,
            23707,
            23740,
            23758,
            23805,
            23815,
            26369,
            27693,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [
            2512,
            2527,
            7041,
            12119,
            16132,
            18420,
            18981,
            23740,
            23758,
            23815,
            26369,
            27613,
            28173,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15_1975_p1_2_cleanup(data):

    # missing data exclusion is retained here, though unnecessary for nagihara data
    # we will continue to check on T and dT rather than Nagihara et al.'s computed columns;
    # we are after all simply discarding any rows marked with outliers in sets past 'clean'.

    mission, probe, sensor = "a15_1975", "p1", 2

    dT_init = np.array(data[mission][probe][sensor]["dT"]).shape[0]

    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # flag extreme outliers in dT.

    flags[[2474, 2679, 2713, 6128, 9858, 13109, 13112, 14120]] += 0b100

    # Flag extreme outliers in T.
    flags[[2474, 2679, 6128, 9858, 9859, 13109, 13112, 14120]] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p1_3_cleanup(data):
    mission, probe, sensor = "a15", "p1", 3

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # ['Time','HTR','TREF','TC1','TC2','TC3','TC4']

    # No attempt to correct HTR data; all 1 or missing.

    # Flag extreme outliers in TREF.

    flags[[4350, 19205, 19235, 19524, 20030, 23455]] += 0b100000

    # Flag extreme outliers in TC1.

    flags[
        [4350, 10908, 15224, 16109, 19205, 19235, 19524, 19661, 20030, 23455, 28238]
    ] += 0b1000000

    # Flag extreme outliers in TC2.

    flags[
        [
            4350,
            7268,
            10908,
            15224,
            16220,
            19205,
            19235,
            19524,
            19661,
            20030,
            23455,
            28238,
        ]
    ] += 0b10000000

    # Flag extreme outliers in TC3.

    flags[
        [4350, 10908, 15224, 16015, 19205, 19235, 19524, 19661, 20030, 23455, 28238]
    ] += 0b100000000

    # Flag extreme outliers in TC4.

    # NOTE: relatively noisy. only very dramatic points flagged.

    flags[
        [4350, 10908, 15224, 19205, 19235, 19524, 19661, 20030, 23455, 26731, 28238]
    ] += 0b1000000000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p1_4_cleanup(data):

    mission, probe, sensor = "a15", "p1", 4
    dT_init = np.array(data[mission][probe][sensor]["T"]).shape[0]

    # Default all corrected data to 'missing data' flag.
    data[mission][probe][sensor]["dT_corr"] = pd.Series(
        -9999 * np.ones(dT_init, dtype=np.float32),
        index=data[mission][probe][sensor].index,
    )

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    dT = data[mission][probe][sensor]["dT"].loc[index].values
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Manually correct the bit flip in dT and flag ambiguous corrections.
    # Note that any ambiguity is extremely minor compared to the point-to-point
    # variation in the actual data, which is what makes them ambiguous.
    # The bit flip occurs at intervals of -2./2**n.
    bins = np.array([-2.0 / 2 ** n for n in range(10)])

    # [-2., -1., -0.5, -0.25, -0.125, -0.0625, -0.0313, -0.0156, -0.008, -0.004]

    dT[0:1] = 2 * bins[5] - dT[0:1]  # Very ambiguous.
    dT[1:3] = 2 * bins[4] - dT[1:3]  # Ambiguous.
    flags[0:3] += 0b10
    dT[3:5] = 2 * bins[3] - dT[3:5]
    dT[5:10] = 2 * bins[2] - dT[5:10]
    dT[10:12] = 2 * bins[3] - dT[10:12]
    dT[12:13] = 2 * bins[4] - dT[12:13]  # Ambiguous.
    flags[12:13] += 0b10
    dT[13:30] = dT[13:30]  # >0
    dT[30:31] = 2 * bins[5] - dT[30:31]  # Ambiguous.
    dT[31:32] = 2 * bins[4] - dT[31:32]  # Ambiguous.
    dT[32:33] = 2 * bins[5] - dT[32:33]  # Ambiguous.
    flags[30:33] += 0b10
    dT[33:48] = dT[33:48]  # >0
    dT[48:49] = 2 * bins[4] - dT[48:49]
    dT[49:53] = 2 * bins[3] - dT[49:53]
    dT[53:54] = 2 * bins[4] - dT[53:54]
    dT[54:55] = 2 * bins[5] - dT[54:55]  # Ambiguous.
    flags[54:55] += 0b10
    dT[55:69] = dT[55:69]  # >0
    dT[69:70] = 2 * bins[5] - dT[69:70]  # Ambiguous.
    flags[69:70] += 0b10
    dT[70:72] = 2 * bins[3] - dT[70:72]
    dT[72:74] = 2 * bins[2] - dT[72:74]
    dT[74:76] = 2 * bins[3] - dT[74:76]
    dT[76:77] = 2 * bins[4] - dT[76:77]  # Ambiguous.
    flags[77:78] += 0b10
    dT[77:89] = dT[77:89]  # >0
    dT[89:90] = 2 * bins[4] - dT[89:90]
    dT[90:91] = 2 * bins[3] - dT[90:91]
    dT[91:97] = 2 * bins[2] - dT[91:97]
    dT[97:98] = 2 * bins[3] - dT[97:98]
    dT[98:99] = 2 * bins[6] - dT[98:99]  # Very ambiguous.
    flags[98:99] += 0b10
    dT[99:109] = dT[99:109]  # >0
    dT[109:110] = 2 * bins[4] - dT[109:110]  # Ambiguous.
    flags[109:110] += 0b10
    dT[110:111] = 2 * bins[3] - dT[110:111]
    dT[111:117] = 2 * bins[2] - dT[111:117]
    dT[117:118] = 2 * bins[3] - dT[117:118]
    dT[118:119] = 2 * bins[4] - dT[118:119]  # Ambiguous.
    flags[118:119] += 0b10
    dT[119:129] = dT[119:129]  # >0
    dT[129:130] = 2 * bins[4] - dT[129:130]  # Ambiguous.
    flags[129:130] += 0b10
    dT[130:131] = 2 * bins[3] - dT[130:131]
    dT[131:134] = 2 * bins[2] - dT[131:134]
    dT[134:137] = 2 * bins[1] - dT[134:137]
    dT[137:140] = 2 * bins[2] - dT[137:140]
    dT[140:141] = 2 * bins[3] - dT[140:141]
    dT[141:142] = 2 * bins[4] - dT[141:142]  # Ambiguous.
    dT[142:143] = 2 * bins[7] - dT[142:143]  # Very ambiguous.
    flags[141:143] += 0b10
    dT[143:149] = dT[143:149]  # >0
    dT[149:150] = 2 * bins[5] - dT[149:150]  # Ambiguous.
    flags[149:150] += 0b10
    dT[150:151] = 2 * bins[3] - dT[150:151]
    dT[151:154] = 2 * bins[2] - dT[151:154]
    dT[154:159] = 2 * bins[1] - dT[154:159]
    dT[159:161] = 2 * bins[2] - dT[159:161]
    dT[161:162] = 2 * bins[3] - dT[161:162]
    dT[162:163] = 2 * bins[4] - dT[162:163]  # Ambiguous.
    dT[163:164] = 2 * bins[6] - dT[163:164]  # Very ambiguous.
    flags[162:164] += 0b10
    dT[164:168] = dT[164:168]  # >0
    dT[168:169] = 2 * bins[3] - dT[168:169]
    dT[169:172] = 2 * bins[2] - dT[169:172]
    dT[172:178] = 2 * bins[1] - dT[172:178]
    dT[178:179] = 2 * bins[2] - dT[178:179]
    dT[179:180] = 2 * bins[2] - dT[179:180]
    dT[180:181] = 2 * bins[3] - dT[180:181]
    dT[181:188] = dT[181:188]  # >0
    dT[188:189] = 2 * bins[6] - dT[188:189]  # Ambiguous.
    dT[189:190] = 2 * bins[4] - dT[189:190]  # Ambiguous.
    flags[188:190] += 0b10
    dT[190:191] = 2 * bins[3] - dT[190:191]
    dT[191:193] = 2 * bins[2] - dT[191:193]
    dT[193:199] = 2 * bins[1] - dT[193:199]
    dT[199:201] = 2 * bins[2] - dT[199:201]
    dT[201:203] = 2 * bins[3] - dT[201:203]
    dT[203:204] = 2 * bins[4] - dT[203:204]  # Ambiguous.
    dT[204:205] = 2 * bins[6] - dT[204:205]  # Very ambiguous.
    flags[203:205] += 0b10
    dT[205:218] = dT[205:218]  # >0
    dT[218:219] = 2 * bins[4] - dT[218:219]  # Ambiguous.
    flags[218:219] += 0b10
    dT[219:222] = 2 * bins[2] - dT[219:222]
    dT[222:229] = 2 * bins[1] - dT[222:229]
    dT[229:231] = 2 * bins[2] - dT[229:231]
    dT[231:232] = 2 * bins[3] - dT[231:232]  # Ambiguous.
    dT[232:233] = 2 * bins[5] - dT[232:233]  # Very ambiguous.
    dT[233:234] = 2 * bins[6] - dT[233:234]  # Very ambiguous.
    flags[231:234] += 0b10
    dT[234:240] = dT[234:240]  # >0
    dT[240:241] = 2 * bins[2] - dT[240:241]  # Ambiguous.
    flags[240:241] += 0b10
    dT[241:244] = 2 * bins[1] - dT[241:244]
    dT[244:245] = 2 * bins[2] - dT[244:245]
    dT[245:246] = 2 * bins[3] - dT[245:246]
    dT[246:247] = 2 * bins[6] - dT[246:247]  # Very ambiguous.
    flags[246:247] += 0b10
    dT[247:252] = dT[247:252]  # >0
    dT[252:253] = 2 * bins[3] - dT[252:253]
    dT[253:254] = 2 * bins[2] - dT[253:254]
    dT[254:255] = 2 * bins[1] - dT[254:255]
    dT[255:256] = 2 * bins[2] - dT[255:256]
    dT[256:257] = 2 * bins[2] - dT[256:257]  # Ambiguous.
    dT[257:258] = 2 * bins[5] - dT[257:258]  # Very ambiguous.
    flags[256:258] += 0b10
    dT[258:264] = dT[258:264]  # >0
    dT[264:265] = 2 * bins[4] - dT[264:265]  # Ambiguous.
    flags[264:265] += 0b10
    dT[265:266] = 2 * bins[2] - dT[265:266]
    dT[266:268] = 2 * bins[1] - dT[266:268]
    dT[268:269] = 2 * bins[2] - dT[268:269]
    dT[269:270] = 2 * bins[4] - dT[269:270]  # Ambiguous.
    flags[269:270] += 0b10
    dT[270:277] = dT[270:277]  # >0
    dT[277:278] = 2 * bins[3] - dT[277:278]  # Ambiguous.
    flags[277:278] += 0b10
    dT[278:279] = 2 * bins[2] - dT[278:279]
    dT[279:280] = 2 * bins[1] - dT[279:280]
    dT[280:281] = 2 * bins[2] - dT[280:281]
    dT[281:282] = 2 * bins[2] - dT[281:282]  # Ambiguous.
    dT[282:283] = 2 * bins[5] - dT[282:283]  # Very ambiguous.
    flags[281:283] += 0b10
    dT[283:288] = dT[283:288]  # >0
    dT[288:289] = 2 * bins[5] - dT[288:289]  # Ambiguous.
    flags[288:289] += 0b10
    dT[289:290] = 2 * bins[2] - dT[289:290]
    dT[290:291] = 2 * bins[1] - dT[290:291]
    dT[291:292] = 2 * bins[1] - dT[291:292]
    dT[292:293] = 2 * bins[2] - dT[292:293]
    dT[293:294] = 2 * bins[3] - dT[293:294]  # Ambiguous.
    flags[293:294] += 0b10
    dT[294:301] = dT[294:301]  # >0
    dT[301:302] = 2 * bins[3] - dT[301:302]  # Ambiguous.
    flags[301:302] += 0b10
    dT[302:303] = 2 * bins[2] - dT[302:303]
    dT[303:305] = 2 * bins[1] - dT[303:305]
    dT[305:306] = 2 * bins[2] - dT[305:306]
    dT[306:307] = 2 * bins[3] - dT[306:307]
    dT[307:312] = dT[307:312]  # >0
    dT[312:313] = 2 * bins[6] - dT[312:313]  # Very ambiguous.
    flags[312:313] += 0b10
    dT[313:314] = 2 * bins[2] - dT[313:314]
    dT[314:316] = 2 * bins[1] - dT[314:316]
    dT[316:317] = 2 * bins[2] - dT[316:317]
    dT[317:318] = 2 * bins[3] - dT[317:318]  # Ambiguous.
    flags[317:318] += 0b10
    dT[318:325] = dT[318:325]  # >0
    dT[325:326] = 2 * bins[4] - dT[325:326]  # Very ambiguous.
    flags[325:326] += 0b10
    dT[326:328] = 2 * bins[2] - dT[326:328]
    dT[328:331] = 2 * bins[1] - dT[328:331]
    dT[331:332] = 2 * bins[2] - dT[331:332]
    dT[332:333] = 2 * bins[2] - dT[332:333]  # Ambiguous.
    dT[333:334] = 2 * bins[5] - dT[333:334]  # Very ambiguous.
    flags[332:334] += 0b10
    dT[334:340] = dT[334:340]  # >0
    dT[340:341] = 2 * bins[2] - dT[340:341]  # Ambiguous.
    flags[340:341] += 0b10
    dT[341:342] = 2 * bins[2] - dT[341:342]
    dT[342:344] = 2 * bins[1] - dT[342:344]
    dT[344:345] = 2 * bins[2] - dT[344:345]
    dT[345:346] = 2 * bins[3] - dT[345:346]  # Ambiguous.
    flags[345:346] += 0b10
    dT[346:351] = dT[346:351]  # >0
    dT[351:352] = 2 * bins[5] - dT[351:352]  # Ambiguous.
    flags[351:352] += 0b10
    dT[352:353] = 2 * bins[2] - dT[352:353]
    dT[353:354] = 2 * bins[1] - dT[353:354]
    dT[354:355] = 2 * bins[1] - dT[354:355]
    dT[355:356] = 2 * bins[2] - dT[355:356]
    dT[356:357] = 2 * bins[3] - dT[356:357]  # Ambiguous.
    dT[357:358] = 2 * bins[5] - dT[357:358]  # Ambiguous.
    flags[356:358] += 0b10
    dT[358:363] = dT[358:363]  # >0
    dT[363:364] = 2 * bins[3] - dT[363:364]
    dT[364:365] = 2 * bins[2] - dT[364:365]
    dT[365:368] = 2 * bins[1] - dT[365:368]
    dT[368:369] = 2 * bins[2] - dT[368:369]
    dT[369:370] = 2 * bins[7] - dT[369:370]  # Very ambiguous.
    flags[369:370] += 0b10
    dT[370:374] = dT[370:374]  # >0
    dT[374:375] = 2 * bins[2] - dT[374:375]  # Ambiguous.
    flags[374:375] += 0b10
    dT[375:376] = 2 * bins[2] - dT[375:376]
    dT[376:379] = 2 * bins[1] - dT[376:379]
    dT[379:380] = 2 * bins[2] - dT[379:380]
    dT[380:381] = 2 * bins[5] - dT[380:381]  # Ambiguous.
    flags[380:381] += 0b10
    dT[381:386] = dT[381:386]  # >0
    dT[386:387] = 2 * bins[3] - dT[386:387]  # Ambiguous.
    flags[386:387] += 0b10
    dT[387:388] = 2 * bins[2] - dT[387:388]
    dT[388:390] = 2 * bins[1] - dT[388:390]
    dT[390:391] = 2 * bins[1] - dT[390:391]
    dT[391:392] = 2 * bins[2] - dT[391:392]
    dT[392:393] = 2 * bins[3] - dT[392:393]  # Ambiguous.
    dT[393:394] = 2 * bins[8] - dT[393:394]  # Very ambiguous.
    flags[392:394] += 0b10
    dT[394:399] = dT[394:399]  # >0
    dT[399:400] = 2 * bins[3] - dT[399:400]  # Ambiguous.
    flags[399:400] += 0b10
    dT[400:401] = 2 * bins[2] - dT[400:401]
    dT[401:404] = 2 * bins[1] - dT[401:404]
    dT[404:405] = 2 * bins[2] - dT[404:405]
    dT[405:406] = 2 * bins[5] - dT[405:406]  # Ambiguous.
    flags[405:406] += 0b10
    dT[406:411] = dT[406:411]  # >0
    dT[411:412] = 2 * bins[4] - dT[411:412]  # Very ambiguous.
    flags[411:412] += 0b10
    dT[412:413] = 2 * bins[2] - dT[412:413]
    dT[413:415] = 2 * bins[1] - dT[413:415]
    dT[415:416] = 2 * bins[2] - dT[415:416]
    dT[416:417] = 2 * bins[4] - dT[416:417]  # Ambiguous.
    flags[416:417] += 0b10
    dT[417:424] = dT[417:424]  # >0
    dT[424:425] = 2 * bins[2] - dT[424:425]  # Ambiguous.
    flags[424:425] += 0b10
    dT[425:426] = 2 * bins[2] - dT[425:426]
    dT[426:427] = 2 * bins[1] - dT[426:427]
    dT[427:429] = 2 * bins[2] - dT[427:429]
    dT[429:430] = 2 * bins[7] - dT[429:430]  # Very ambiguous.
    flags[429:430] += 0b10
    dT[430:435] = dT[430:435]  # >0
    dT[435:436] = 2 * bins[4] - dT[435:436]  # Ambiguous.
    flags[435:436] += 0b10
    dT[436:438] = 2 * bins[2] - dT[436:438]
    dT[438:439] = 2 * bins[1] - dT[438:439]
    dT[439:440] = 2 * bins[2] - dT[439:440]
    dT[440:441] = 2 * bins[4] - dT[440:441]  # Ambiguous.
    flags[440:441] += 0b10
    dT[441:446] = dT[441:446]  # >0
    dT[446:447] = 2 * bins[3] - dT[446:447]  # Ambiguous.
    flags[446:447] += 0b10
    dT[447:448] = 2 * bins[2] - dT[447:448]
    dT[448:449] = 2 * bins[1] - dT[448:449]
    dT[449:450] = 2 * bins[2] - dT[449:450]
    dT[450:451] = 2 * bins[3] - dT[450:451]  # Ambiguous.
    flags[450:451] += 0b10
    dT[451:458] = dT[451:458]  # >0
    dT[458:459] = 2 * bins[3] - dT[458:459]  # Ambiguous.
    flags[458:459] += 0b10
    dT[459:462] = 2 * bins[1] - dT[459:462]
    dT[462:463] = 2 * bins[3] - dT[462:463]
    dT[463:464] = 2 * bins[4] - dT[463:464]  # Ambiguous.
    flags[463:464] += 0b10
    dT[464:469] = dT[464:469]  # >0
    dT[469:470] = 2 * bins[-3] - dT[469:470]  # Ambiguous.
    flags[469:470] += 0b10
    dT[470:471] = 2 * bins[2] - dT[470:471]
    dT[471:473] = 2 * bins[1] - dT[471:473]
    dT[473:475] = 2 * bins[2] - dT[473:475]
    dT[475:476] = 2 * bins[4] - dT[475:476]  # Ambiguous.
    dT[476:477] = 2 * bins[9] - dT[476:477]  # Very ambiguous.
    flags[475:477] += 0b10
    dT[477:483] = dT[477:483]  # >0
    dT[483:485] = 2 * bins[2] - dT[483:485]
    dT[485:487] = 2 * bins[1] - dT[485:487]
    dT[487:488] = 2 * bins[2] - dT[487:488]
    dT[488:489] = 2 * bins[3] - dT[488:489]
    dT[489:490] = 2 * bins[-5] - dT[489:490]  # Ambiguous.
    flags[489:490] += 0b10
    dT[490:495] = dT[490:495]  # >0
    dT[495:496] = 2 * bins[3] - dT[495:496]
    dT[496:498] = 2 * bins[1] - dT[496:498]
    dT[498:499] = 2 * bins[1] - dT[498:499]
    dT[499:500] = 2 * bins[2] - dT[499:500]
    dT[500:501] = 2 * bins[-2] - dT[500:501]  # Very ambiguous.
    flags[500:501] += 0b10
    dT[501:505] = dT[501:505]  # >0
    dT[505:506] = 2 * bins[6] - dT[505:506]  # Ambiguous.
    flags[505:506] += 0b10
    dT[506:508] = 2 * bins[2] - dT[506:508]
    dT[507:510] = 2 * bins[1] - dT[507:510]
    dT[510:511] = 2 * bins[2] - dT[510:511]
    dT[511:512] = 2 * bins[3] - dT[511:512]
    dT[512:513] = 2 * bins[6] - dT[512:513]  # Ambiguous.
    flags[512:513] += 0b10
    dT[513:517] = dT[513:517]  # >0
    dT[517:518] = 2 * bins[7] - dT[517:518]
    dT[518:519] = 2 * bins[2] - dT[518:519]
    dT[519:522] = 2 * bins[1] - dT[519:522]
    dT[522:523] = 2 * bins[2] - dT[522:523]
    dT[523:524] = 2 * bins[3] - dT[523:524]
    dT[524:525] = 2 * bins[5] - dT[524:525]  # Ambiguous.
    flags[524:525] += 0b10
    dT[525:531] = dT[525:531]  # >0
    dT[531:532] = 2 * bins[2] - dT[531:532]
    dT[532:535] = 2 * bins[1] - dT[532:535]
    dT[535:536] = 2 * bins[2] - dT[535:536]
    dT[536:543] = dT[536:543]  # >0
    dT[543:544] = 2 * bins[3] - dT[543:544]
    dT[544:545] = 2 * bins[2] - dT[544:545]
    dT[545:546] = 2 * bins[1] - dT[545:546]
    dT[546:547] = 2 * bins[1] - dT[546:547]
    dT[547:548] = 2 * bins[2] - dT[547:548]
    dT[548:549] = 2 * bins[3] - dT[548:549]
    dT[549:556] = dT[549:556]  # >0
    dT[556:557] = 2 * bins[3] - dT[556:557]
    dT[557:558] = 2 * bins[2] - dT[557:558]
    dT[558:559] = 2 * bins[1] - dT[558:559]
    dT[559:560] = 2 * bins[1] - dT[559:560]
    dT[560:561] = 2 * bins[2] - dT[560:561]
    dT[561:562] = 2 * bins[3] - dT[561:562]  # Ambiguous.
    flags[561:562] += 0b10
    dT[562:567] = dT[562:567]  # >0
    dT[567:568] = 2 * bins[-4] - dT[567:568]  # Ambiguous.
    flags[567:568] += 0b10
    dT[568:569] = 2 * bins[3] - dT[568:569]
    dT[569:570] = 2 * bins[2] - dT[569:570]
    dT[570:571] = 2 * bins[1] - dT[570:571]
    dT[571:572] = 2 * bins[3] - dT[571:572]
    dT[572:578] = dT[572:578]  # >0
    dT[578:579] = 2 * bins[4] - dT[578:579]  # Ambiguous.
    flags[578:579] += 0b10
    dT[579:582] = 2 * bins[2] - dT[579:582]
    dT[582:583] = 2 * bins[3] - dT[582:583]  # Ambiguous.
    flags[582:583] += 0b10
    dT[583:589] = dT[583:589]  # >0
    dT[589:591] = 2 * bins[2] - dT[589:591]
    dT[591:592] = 2 * bins[1] - dT[591:592]
    dT[592:594] = 2 * bins[2] - dT[592:594]
    dT[594:601] = dT[594:601]  # >0
    dT[601:602] = 2 * bins[6] - dT[601:602]  # Ambiguous.
    flags[601:602] += 0b10
    dT[602:603] = 2 * bins[2] - dT[602:603]
    dT[603:604] = 2 * bins[1] - dT[603:604]
    dT[604:605] = 2 * bins[2] - dT[604:605]
    dT[605:611] = dT[605:611]  # >0
    dT[611:612] = 2 * bins[6] - dT[611:612]  # Ambiguous.
    flags[611:612] += 0b10
    dT[612:613] = 2 * bins[3] - dT[612:613]  # Ambiguous.
    flags[612:613] += 0b10

    # Flag extreme outliers in dT.
    flags[[]] += 0b100

    # Flag extreme outliers in T.
    flags[[473, 595]] += 0b1000

    data[mission][probe][sensor].loc[index, "dT_corr"] = dT
    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p1_5_cleanup(data):
    mission, probe, sensor = "a15", "p1", 5

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[[160, 176, 582, 596]] += 0b100

    # Flag extreme outliers in T.
    flags[[160, 596]] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p2_1_cleanup(data):
    mission, probe, sensor = "a15", "p2", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.

    flags = data[mission][probe][sensor]["flags"].loc[index].values
    dT_init = np.array(data[mission][probe][sensor]["dT"]).shape[0]
    data[mission][probe][sensor]["dT_corr"] = pd.Series(
        -9999 * np.ones(dT_init, dtype=np.float32),
        index=data[mission][probe][sensor].index,
    )
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0
    dT = data[mission][probe][sensor]["dT"].loc[index].values

    # factor-of-10 corrections on first few lunations. this is likely compensating
    # for archivists' incorrect choice of dT sensitivity.

    for i in np.where(np.logical_and(dT <= 2, dT > 0))[0]:
        if dT[i - 1] > 0 and dT[i - 2] > 0 and dT[i - 3] > 0:
            dT[i] *= 10
            flags[i] += 0b1000000000000

    # Due to the rapid temperature changes and the specific numbers they fall to,
    # most negative values in this file are reflected around -2. there remain a number of
    # strange, sharp dips around lunar sunrise and sunset that cannot be accounted for by
    # the bitflip error. They are plausibly due to some electrical effect of rapid temperature
    # changes past the designed limits of this thermometer, and probably related to the spikes
    # seen in positive dT values around lunar sunset (and perhaps also sunrise). However, they
    # are *also* certainly subject to the bitflip error and it is impossible to
    # determine their 'correct' binary order of magnitude. We have avoided correcting them
    # and have given them a special flag.
    # there is also weird jaggedy bit around 15860 that does not appear to be an actual bitflip.

    # Similarly, [TODO: DESCRIBE ECLIPSES]

    bins = np.array([-2.0 / 2 ** n for n in range(10)])

    dT = dT + (dT < 0) * (-2 * 16 - 2 * dT)

    for i in [2441, 2442, 4790, 7334, 8439, 11102, 19206, 22589, 22590]:
        flags[i] += 0b100000000000
        # reverse the correction
        dT[i] = -dT[i] - 16

    # Flag extreme outliers in dT.

    # TODO: rewrite this

    # NOTE: There tends to be a bit spike at the temperature transitions which
    #       I assume correspond to the terminus transition and accompanying
    #       huge temp swings associated with direct sunlight in day vs. night.
    #       I have _not_ flagged these spikes as outliers. However, corresponding
    # 		negative values have been given a special flag (see above),
    # 		as they are certainly subject to the bitflip error, but their correct order
    # 		of magnitude is impossible to determine.
    # NOTE: There are a number of lunar eclipses. They are also subject to the bitflip error when negative, and
    # 		their correct order of magnitude is impossible to determine. Where negative, we
    # 		have given them a special flag (see above for values).

    flags[
        [
            2267,
            4282,
            5460,
            15561,
            19124,
            19127,
            19296,
            19923,
            22401,
            23815,
            23458,
            24046,
        ]
    ] += 0b100

    flags[[2267, 4282, 4583, 15561, 23183]] += 0b1000

    data[mission][probe][sensor].loc[index, "dT_corr"] = dT
    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15_1975p2_1_cleanup(data):
    mission, probe, sensor = "a15_1975", "p2", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0
    dT_init = np.array(data[mission][probe][sensor]["T"]).shape[0]

    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # flag extreme outliers in dT.
    flags[[4634, 13088, 13846, 13849, 14224, 14628, 14630, 14631, 17317]] += 0b100

    # Flag extreme outliers in T.
    flags[[13848, 14630, 17317]] += 0b1000

    # NOTE: lunar eclipse on May 25 (points ~10320-10370). After the average temperature spike from transition back
    # to sunlight, there's an odd temperature drop (or perhaps it's odd that the temperature spike was so large).
    # This has not been flagged.

    # NOTE: As in the Lamont-archived data, we see odd jumps at terminus transitions -- for instance,
    # average bridge temperatures typically *drop* by ~0.5 K for a single point before shooting up to their sunlit level.
    # These may be physically meaningful, and we have not flagged them.

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p2_2_cleanup(data):
    mission, probe, sensor = "a15", "p2", 2

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0
    dT_init = np.array(data[mission][probe][sensor]["T"]).shape[0]

    # Default all corrected data to 'missing data' flag.
    data[mission][probe][sensor]["dT_corr"] = pd.Series(
        -9999 * np.ones(dT_init, dtype=np.float32),
        index=data[mission][probe][sensor].index,
    )

    # Turn the data of interest into a numpy array because they're easier.
    dT = data[mission][probe][sensor]["dT"].loc[index].values
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    bins = np.array([-2.0 / 2 ** n for n in range(10)])

    # this data suffers from the bitflip error *only* towards the beginning of the set,
    # when the data is dominated by emplacement effects.

    # NOTE: these corrections go outside of the 'normal' bins range,
    # at both the small and large ends of the scale.

    dT[0:24] = 2 * -8 - dT[0:24]
    dT[24:32] = 2 * -4 - dT[24:32]
    dT[32:42] = 2 * bins[0] - dT[32:42]
    dT[42:50] = 2 * bins[1] - dT[42:50]
    dT[51:62] = 2 * bins[2] - dT[51:62]
    dT[62:74] = 2 * bins[3] - dT[62:74]
    dT[74:84] = 2 * bins[4] - dT[74:84]
    dT[84:89] = 2 * bins[5] - dT[84:89]
    dT[89:93] = 2 * bins[6] - dT[89:93]
    dT[93:95] = 2 * bins[7] - dT[93:95]
    dT[95:96] = 2 * bins[8] - dT[95:96]
    dT[96:97] = 2 * bins[9] - dT[96:97]
    dT[97:98] = 2 * (-2.0 / 2 ** 11) - dT[97:98]  # Ambiguous.
    flags[97:98] += 0b10
    dT[256:257] = 2 * (-2 / 2 ** 12) - dT[256:257]  # Ambiguous.
    dT[257:258] = 2 * bins[-1] - dT[257:258]
    dT[258:262] = 2 * bins[-2] - dT[258:262]
    dT[262:272] = 2 * bins[-3] - dT[262:272]
    dT[272:309] = 2 * bins[-4] - dT[272:309]
    dT[309:316] = 2 * bins[-3] - dT[309:316]
    dT[316:317] = 2 * bins[-2] - dT[316:317]
    dT[317:318] = 2 * bins[-1] - dT[317:318]
    dT[318:319] = 2 * (-2 / 2 ** 11) - dT[318:319]  # Ambiguous.
    flags[318:319] += 0b10
    dT[319:320] = 2 * (-2 / 2 ** 12) - dT[319:320]  # Ambiguous.
    flags[319:320] += 0b10

    # flag extreme outliers in dT.
    flags[
        [
            7044,
            11635,
            16118,
            18846,
            19295,
            19530,
            19541,
            19881,
            21552,
            21814,
            23342,
            26473,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[[2503, 11635, 16118, 18846, 19530, 19541, 21814, 23342, 26473]] += 0b1000

    data[mission][probe][sensor].loc[index, "dT_corr"] = dT
    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15_1975p2_2_cleanup(data):
    mission, probe, sensor = "a15_1975", "p2", 2

    # Only correct data not already flagged w/ 'missing' value.

    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.

    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[
        [
            6618,
            7439,
            9336,
            10171,
            12601,
            13047,
            13079,
            13823,
            13824,
            13825,
            14601,
            14716,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[[3672, 7439, 13047, 13079, 13823, 13824, 13825]] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p2_3_cleanup(data):

    mission, probe, sensor = "a15", "p2", 3

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # ['Time','HTR','TREF','TC1','TC2','TC3','TC4']

    # No attempt to correct HTR data; all 1 or missing.

    # Flag extreme outliers in TREF.

    flags[[4350, 19205, 19235, 19524, 20030, 23455]] += 0b100000

    # Flag extreme outliers in TC1.

    flags[
        [
            4341,
            7265,
            16170,
            19195,
            19225,
            19845,
            19964,
            19968,
            19980,
            20025,
            22561,
            23028,
            23749,
            25047,
            25804,
            27526,
            28324,
        ]
    ] += 0b1000000

    # Flag extreme outliers in TC2.

    flags[
        [
            4341,
            16170,
            19195,
            19225,
            19672,
            19845,
            19964,
            19968,
            19980,
            20025,
            22056,
            22561,
            23028,
            23749,
            25804,
            28324,
        ]
    ] += 0b10000000

    # Flag extreme outliers in TC3.

    flags[
        [
            4341,
            12708,
            16170,
            19195,
            19225,
            19845,
            19964,
            19968,
            19980,
            20025,
            22561,
            23028,
            23749,
            25047,
            25804,
            28324,
        ]
    ] += 0b100000000

    # Flag extreme outliers in TC4.

    flags[
        [
            4341,
            16170,
            19195,
            19225,
            19845,
            19964,
            19968,
            19980,
            20025,
            22561,
            23028,
            23749,
            25047,
            25804,
            28324,
        ]
    ] += 0b1000000000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p2_4_cleanup(data):
    mission, probe, sensor = "a15", "p2", 4
    dT_init = np.array(data[mission][probe][sensor]["T"]).shape[0]

    # Default all corrected data to 'missing data' flag.
    data[mission][probe][sensor]["dT_corr"] = pd.Series(
        -9999 * np.ones(dT_init, dtype=np.float32),
        index=data[mission][probe][sensor].index,
    )

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    dT = data[mission][probe][sensor]["dT"].loc[index].values
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # this data is bit-flipped. However, because of the extremely rapid
    # temperature changes that cause dT to quicky switch between positive and negative
    # saturation thresholds, every negative value except for 564 is mirrored around -2.
    # 564 is mirrored around -0.5.

    bins = np.array([-2.0 / 2 ** n for n in range(10)])

    dT = dT + (dT < 0) * (-4 - 2 * dT)
    dT[564] = dT[564] - 2 * bins[1] + 2 * bins[2]

    # Flag extreme outliers in dT.
    flags[[116]] += 0b100

    # Flag extreme outliers in T.
    flags[[108, 116]] += 0b1000

    data[mission][probe][sensor].loc[index, "dT_corr"] = dT
    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a15p2_5_cleanup(data):
    mission, probe, sensor = "a15", "p2", 5

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[[221, 231, 255, 475,]] += 0b100

    # Flag extreme outliers in T.
    flags[[221, 231, 255, 422, 475,]] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p1_1_cleanup(data):
    mission, probe, sensor = "a17", "p1", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[
        [
            2562,
            3905,
            7026,
            7525,
            11026,
            11243,
            11910,
            12015,
            12704,
            13861,
            13865,
            13953,
            13956,
            14096,
            14400,
            15933,
            16921,
            19990,
            19996,
            20205,
            20208,
            20326,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [
            3905,
            6102,
            7525,
            11016,
            11243,
            11910,
            13953,
            13956,
            14096,
            14690,
            15933,
            16921,
            16922,
            19211,
            19990,
            20205,
            20208,
            20326,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags


def a17_1975p1_1_cleanup(data):

    mission, probe, sensor = "a17_1975", "p1", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # NOTE: there's an odd phenomenon beginning at point 3245, from April 23-24 1975. It has structure that suggests
    # it might be 'real,' but a physical source for it is unclear. We have not flagged this range.

    # Flag extreme outliers in dT.

    flags[
        [
            2162,
            2164,
            2166,
            2184,
            2186,
            2195,
            2201,
            2203,
            2216,
            2862,
            3220,
            3222,
            5453,
            6729,
            10443,
            11893,
            11894,
            12117,
            13230,
            13847,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [2169, 2184, 2186, 2193, 2196, 2205, 3220, 3222, 7283, 12117, 12713, 13847]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags


def a17_1976p1_1_cleanup(data):

    mission, probe, sensor = "a17_1976", "p1", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # NOTE: some time ranges are out of order (e.g ~1380-1420), creating apparent errors in the uncorrected data. the corrected data
    # sorts these ranges, and they are not flagged.

    # Flag extreme outliers in dT.

    flags[
        [
            659,
            2265,
            4810,
            10707,
            10716,
            12295,
            15463,
            15839,
            16209,
            17010,
            17055,
            17338,
            17507,
            22137,
            22850,
            22851,
            22934,
            23191,
            27617,
            28376,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [
            1314,
            2103,
            3233,
            4810,
            6978,
            7337,
            10712,
            12295,
            15463,
            16209,
            17055,
            17388,
            17490,
            17507,
            18165,
            22850,
            22934,
            24050,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags


def a17_1977p1_1_cleanup(data):

    mission, probe, sensor = "a17_1977", "p1", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # NOTE: some time ranges are out of order (e.g. ~3850-3880), creating apparent errors in the uncorrected data.
    # these data are sorted in the corrected output, and they are not flagged.

    # Flag extreme outliers in dT.

    flags[
        [
            5285,
            5424,
            5475,
            5834,
            5836,
            5976,
            7307,
            8693,
            10430,
            12473,
            15471,
            15489,
            15741,
            20191,
            20193,
            20281,
            24834,
            24868,
            24869,
            24991,
            25063,
            26589,
            27203,
            28389,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [
            618,
            4440,
            5285,
            5475,
            5834,
            7037,
            8693,
            10430,
            15849,
            15741,
            20028,
            20191,
            20193,
            20196,
            20281,
            24443,
            24834,
            24912,
            24985,
            24991,
            25063,
            26589,
            27374,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags


def a17p1_2_cleanup(data):
    mission, probe, sensor = "a17", "p1", 2
    dT_init = np.array(data[mission][probe][sensor]["T"]).shape[0]

    # Default all corrected data to 'missing data' flag.
    data[mission][probe][sensor]["dT_corr"] = pd.Series(
        -9999 * np.ones(dT_init, dtype=np.float32),
        index=data[mission][probe][sensor].index,
    )

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    dT = data[mission][probe][sensor]["dT"].loc[index].values
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    bins = np.array([-2.0 / 2 ** n for n in range(10)])

    # this data suffers from the bitflip error *only* towards the beginning of the set,
    # when the data is dominated by emplacement effects.

    # NOTE: these corrections go outside of the 'normal' bins range,
    # at both the small and large ends of the scale.

    dT[0:1] = (
        2 * -8 - dT[0:1]
    )  # Ambiguous. It's possible these initial points don't go so low.
    dT[1:2] = 2 * -4 - dT[1:2]  # Ambiguous
    dT[2:3] = 2 * bins[0] - dT[2:3]  # Ambiguous
    flags[0:3] += 0b10
    dT[3:4] = 2 * bins[1] - dT[3:4]
    dT[4:5] = 2 * bins[2] - dT[4:5]
    dT[5:6] = 2 * bins[4] - dT[5:6]
    dT[6:7] = 2 * bins[4] - dT[6:7]
    dT[7:8] = 2 * bins[4] - dT[7:8]
    dT[8:9] = 2 * bins[6] - dT[8:9]
    # the range 9:15 is small and terminates in a missing point; it is unclear what
    # corrections to apply. marked as outliers below.
    dT[9:15] = dT[9:15]
    dT[15:18] = dT[15:18]  # >0
    dT[18:19] = 2 * bins[9] - dT[18:19]
    dT[19:20] = 2 * bins[8] - dT[19:20]
    dT[20:22] = 2 * bins[7] - dT[20:22]
    dT[22:25] = 2 * bins[6] - dT[22:25]
    dT[25:32] = 2 * bins[5] - dT[25:32]
    dT[32:99] = 2 * bins[4] - dT[32:99]
    dT[99:120] = 2 * bins[5] - dT[99:120]
    dT[120:131] = 2 * bins[6] - dT[120:131]
    dT[131:136] = 2 * bins[7] - dT[131:136]
    dT[136:139] = 2 * bins[8] - dT[136:139]
    dT[139:141] = 2 * bins[9] - dT[139:141]
    dT[141:142] = 2 * 2 / -(2 ** 10) - dT[141:142]  # Ambiguous.
    flags[141:142] += 0b10

    # Flag extreme outliers in dT.

    flags[
        [
            9,
            10,
            11,
            12,
            13,
            14,
            5523,
            6156,
            9834,
            10489,
            10607,
            11114,
            11341,
            11492,
            14051,
            14494,
            16030,
            16031,
            16032,
            16973,
            19390,
            19392,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [
            5523,
            6516,
            9834,
            11114,
            11341,
            11492,
            12004,
            14494,
            16030,
            16031,
            18155,
            19392,
            20303,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "dT_corr"] = dT
    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p1_3_cleanup(data):

    mission, probe, sensor = "a17", "p1", 3

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # ['Time','HTR','TREF','TC1','TC2','TC3','TC4']

    # No attempt to correct HTR data; all 1 or missing.

    # NOTE: these thermometers are full of thermal noise; errors are hard to clearly discern.
    # I have been conservative, for instance, about flagging regions that seem like bursts of
    # noise with no single physically implausible values. it's plausible that large regions
    # of these data are problematic, however. in particular, there bursts around lunar noon
    # likely contain a lot of garbage. these bursts are especially egregious in TC3 and TC4
    # due to their relatively low variation; it is possible that everything during the lunar
    # day is untrustworthy in these files.

    # Flag extreme outliers in TREF.

    flags[
        [2793, 6165, 7711, 9024, 10696, 10807, 14675, 14824, 16256, 16618, 19661]
    ] += 0b100000

    # Flag extreme outliers in TC1.

    flags[
        [
            548,
            2793,
            4836,
            5543,
            6165,
            9024,
            10807,
            14277,
            14675,
            14824,
            15826,
            16256,
            19661,
            20359,
        ]
    ] += 0b1000000

    # Flag extreme outliers in TC2.

    flags[
        [
            2793,
            3340,
            6165,
            7473,
            7724,
            9024,
            10755,
            10807,
            14675,
            14824,
            15818,
            16256,
            19661,
            20359,
        ]
    ] += 0b10000000

    # Flag extreme outliers in TC3.

    flags[
        [
            2793,
            4723,
            4817,
            6323,
            6332,
            9024,
            9308,
            10755,
            10807,
            11826,
            12168,
            12581,
            14197,
            14208,
            14252,
            14675,
            14690,
            14824,
            15721,
            15735,
            15818,
            15826,
            16256,
            17148,
            17319,
            17353,
            18593,
            18651,
            18669,
            19335,
            19625,
            19661,
            19668,
            20359,
            20728,
        ]
    ] += 0b100000000

    # Flag extreme outliers in TC4.

    flags[
        [
            2793,
            4710,
            4817,
            7711,
            8693,
            9024,
            9532,
            10365,
            10369,
            10807,
            14675,
            14824,
            16256,
            17353,
            19661,
            20359,
        ]
    ] += 0b1000000000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p1_4_cleanup(data):
    mission, probe, sensor = "a17", "p1", 4

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[[]] += 0b100  # None (but noisy)

    # Flag extreme outliers in T.
    flags[[]] += 0b1000  # None (but noisy)

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p1_5_cleanup(data):
    mission, probe, sensor = "a17", "p1", 5

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[[77, 258,]] += 0b100

    # Flag extreme outliers in T.
    flags[[77, 258,]] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p2_1_cleanup(data):
    mission, probe, sensor = "a17", "p2", 1

    dT_init = np.array(data[mission][probe][sensor]["T"]).shape[0]

    # Default all corrected data to 'missing data' flag.
    data[mission][probe][sensor]["dT_corr"] = pd.Series(
        -9999 * np.ones(dT_init, dtype=np.float32),
        index=data[mission][probe][sensor].index,
    )

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    dT = data[mission][probe][sensor]["dT"].loc[index].values
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    bins = np.array([-2.0 / 2 ** n for n in range(11)])

    # this data suffers from the bitflip error in only two small regions: towards the
    # beginning, when the values are dominated by emplacement effects, and a little later,
    # when the data is dominated by the onboard heater.

    # NOTE: these corrections go outside of the 'normal' bins range
    # at the small end of the scale.

    dT[0:13] = 2 * bins[6] - dT[0:13]
    dT[13:21] = 2 * bins[7] - dT[13:21]
    dT[21:25] = 2 * bins[8] - dT[21:25]
    dT[25:27] = 2 * bins[9] - dT[25:27]
    dT[27:28] = 2 * bins[10] - dT[27:28]

    dT[1123:1142] = 2 * bins[-1] - dT[1123:1142]
    dT[1142:1143] = 2 * bins[-2] - dT[1142:1143]
    dT[1143:1144] = 2 * bins[-1] - dT[1143:1144]  # Ambiguous.
    flags[1143:1144] += 0b10
    dT[1144:1173] = 2 * bins[-2] - dT[1144:1173]
    dT[1173:1227] = 2 * bins[-3] - dT[1173:1227]

    data[mission][probe][sensor].loc[index, "dT_corr"] = dT

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[
        [
            3870,
            3964,
            5652,
            6161,
            7484,
            9193,
            9720,
            11858,
            13798,
            12058,
            13214,
            13798,
            13900,
            14041,
            14337,
            4339,
            15364,
            15853,
            16228,
            16594,
            16748,
            18540,
            18757,
            19322,
            20139,
        ]
    ] += 0b100

    # NOTE: There is a spike ~14570 that has structure that might be 'real.' I have not
    # flagged it. Similarly for ~19600. neither appear to match the recorded heater schedule,
    # so their possible causes are unclear.

    # Flag extreme outliers in T.
    flags[
        [
            3964,
            9695,
            10693,
            11858,
            13798,
            13814,
            15364,
            15875,
            16594,
            16748,
            16749,
            18540,
            18757,
            19231,
            19326,
            19604,
            20139,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17_1975p2_1_cleanup(data):
    mission, probe, sensor = "a17_1975", "p2", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[
        [
            2174,
            2184,
            2192,
            2208,
            2733,
            3025,
            5427,
            6244,
            6320,
            7258,
            10304,
            12102,
            13197,
            13216,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[[2188, 3027, 3214, 6244, 6320, 6719, 11201, 13197, 13216]] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17_1976p2_1_cleanup(data):
    mission, probe, sensor = "a17_1976", "p2", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # NOTE: some time ranges are out of order (e.g. ~1390-1430). these are sorted in the data output and not flagged here.

    # Flag extreme outliers in dT.
    flags[
        [
            2416,
            4816,
            7055,
            7062,
            7268,
            7275,
            7462,
            10722,
            11879,
            12093,
            12300,
            12370,
            12373,
            12495,
            12621,
            12654,
            12669,
            16191,
            17185,
            17202,
            17205,
            17299,
            17363,
            16366,
            17503,
            17650,
            17689,
            17899,
            18146,
            22817,
            22904,
            25226,
            26885,
            27352,
            29239,
            29521,
            28088,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [
            4816,
            7062,
            7275,
            7418,
            10729,
            11879,
            12093,
            12370,
            12495,
            12669,
            17185,
            17202,
            17205,
            17363,
            17366,
            17650,
            17688,
            17705,
            17889,
            17899,
            18097,
            18146,
            19342,
            22109,
            22817,
            24175,
            22904,
            25226,
            27352,
            28088,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17_1977p2_1_cleanup(data):
    mission, probe, sensor = "a17_1977", "p2", 1

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # NOTE: some time ranges are out of order, e.g. ~3860:3880. these are sorted in the data output and not flagged here.

    # Flag extreme outliers in dT.
    flags[
        [
            4812,
            5197,
            5221,
            5467,
            5835,
            5836,
            5984,
            10409,
            19608,
            15399,
            15464,
            15716,
            15729,
            20064,
            20243,
            20344,
            21063,
            21184,
            21250,
            21482,
            21902,
            24833,
            25254,
            26552,
            27329,
            28336,
            28339,
            28345,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [
            5220,
            5221,
            5225,
            5836,
            10608,
            15399,
            15464,
            15729,
            19843,
            20064,
            20176,
            20237,
            20243,
            21063,
            21184,
            21250,
            21468,
            21482,
            24628,
            24833,
            24948,
            25024,
            25254,
            26044,
            28339,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p2_2_cleanup(data):
    mission, probe, sensor = "a17", "p2", 2
    dT_init = np.array(data[mission][probe][sensor]["T"]).shape[0]

    # Default all corrected data to 'missing data' flag.
    data[mission][probe][sensor]["dT_corr"] = pd.Series(
        -9999 * np.ones(dT_init, dtype=np.float32),
        index=data[mission][probe][sensor].index,
    )

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    dT = data[mission][probe][sensor]["dT"].loc[index].values
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    bins = np.array([-2.0 / 2 ** n for n in range(11)])

    # this data suffers from the bitflip error in only two small regions: towards the
    # beginning, when the values are dominated by emplacement effects, and a little later,
    # when the data is dominated by the onboard heater.

    # NOTE: these corrections go outside of the 'normal' bins range
    # at both the small and large end of the scale.

    dT[0:4] = 2 * -4 - dT[0:4]
    dT[4:12] = 2 * bins[0] - dT[4:12]
    dT[12:21] = 2 * bins[1] - dT[12:21]
    dT[21:27] = 2 * bins[2] - dT[21:27]
    dT[27:33] = 2 * bins[3] - dT[27:33]
    dT[33:36] = 2 * bins[4] - dT[33:36]
    dT[36:39] = 2 * bins[5] - dT[36:39]
    dT[39:40] = 2 * bins[6] - dT[39:40]
    dT[40:41] = 2 * bins[7] - dT[40:41]

    dT[2515:2517] = 2 * bins[10] - dT[2515:2517]  # Ambiguous.
    flags[2515:2517] += 0b10
    dT[2517:2524] = 2 * bins[9] - dT[2517:2524]
    dT[2524:2539] = 2 * bins[8] - dT[2524:2539]
    dT[2539:2598] = 2 * bins[7] - dT[2539:2598]
    dT[2598:2599] = 2 * bins[6] - dT[2598:2599]
    dT[2599:2600] = 2 * bins[7] - dT[2599:2600]
    dT[2600:2618] = 2 * bins[6] - dT[2600:2618]
    dT[2618:2619] = 2 * bins[7] - dT[2618:2619]  # Ambiguous.
    flags[2618:2619] += 0b10

    data[mission][probe][sensor].loc[index, "dT_corr"] = dT

    # Flag extreme outliers in dT.
    # NOTE: There is an odd spike at 18490 with structure that suggests it might be 'real.'
    # I have not flagged this range.

    flags[
        [
            6176,
            6910,
            7121,
            7352,
            8604,
            9088,
            9511,
            9799,
            9850,
            11270,
            11452,
            12360,
            14221,
            14442,
            14376,
            15468,
            16852,
            18644,
            19855,
            20017,
            20243,
        ]
    ] += 0b100

    # Flag extreme outliers in T.
    flags[
        [
            6176,
            6910,
            7121,
            7352,
            8604,
            11452,
            12360,
            12817,
            14221,
            14442,
            15468,
            16334,
            16852,
            16853,
            18490,
            18644,
            19521,
            20017,
            20243,
        ]
    ] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p2_3_cleanup(data):

    mission, probe, sensor = "a17", "p2", 3

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # ['Time','HTR','TREF','TC1','TC2','TC3','TC4']

    # No attempt to correct HTR data; all 1 or missing.

    # NOTE:
    # (same as probe 1)
    # these thermometers are relatively noisy; errors are hard to clearly discern.
    # I have been conservative, for instance, about flagging regions that seem like noisy
    # trends with no single physically implausible values. it's plausible that large regions
    # of these data are problematic, however. in particular, there are bursts of noise
    # around each lunar noon that likely contain a lot of garbage. these bursts are
    # especially egregious in TC3 and TC4 due to their relatively low variation; it is
    # possible that everything during the lunar day is untrustworthy in these files.

    # Flag extreme outliers in TREF.

    # NOTE: this reference bridge is significantly less noisy than its associated
    # thermocouples. there are events at 15869 and 20145 that seem 'real'.
    # these ranges are not flagged.

    flags[[13550, 15864, 16255, 16265, 16275]] += 0b100000

    # Flag extreme outliers in TC1.

    flags[
        [
            4721,
            6160,
            6677,
            9222,
            9326,
            9561,
            9967,
            10697,
            10749,
            11261,
            11465,
            14027,
            14150,
            14704,
            15864,
            16255,
            16265,
            16275,
            20198,
        ]
    ] += 0b1000000

    # Flag extreme outliers in TC2.

    flags[
        [
            6160,
            6318,
            6324,
            6677,
            8591,
            9222,
            9326,
            9561,
            10309,
            11160,
            11465,
            11909,
            11934,
            11954,
            11974,
            12742,
            14150,
            14704,
            15864,
            16255,
            16265,
            16275,
            16486,
            16992,
            18021,
            18023,
            18655,
            19368,
            19694,
            20118,
            20119,
            20198,
        ]
    ] += 0b10000000

    # Flag extreme outliers in TC3.

    flags[
        [
            4737,
            4738,
            6318,
            6321,
            6323,
            6677,
            9222,
            9326,
            9561,
            9859,
            10264,
            10344,
            10349,
            14150,
            14201,
            14210,
            14211,
            14672,
            14704,
            14995,
            15864,
            16255,
            16265,
            16275,
            20019,
            20039,
            20049,
            20198,
            20689,
        ]
    ] += 0b100000000

    # Flag extreme outliers in TC4.

    flags[
        [
            2105,
            3226,
            3990,
            4720,
            4738,
            6314,
            6315,
            6318,
            6677,
            8692,
            8694,
            9222,
            9326,
            9561,
            10309,
            10344,
            10349,
            10359,
            10360,
            11090,
            11160,
            11465,
            12713,
            12736,
            12742,
            12773,
            12783,
            14150,
            14704,
            15864,
            16255,
            16265,
            16275,
            16486,
            18642,
            18655,
            19328,
            19332,
            19342,
            19359,
            20019,
            20039,
            20049,
            20198,
            20689,
        ]
    ] += 0b1000000000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p2_4_cleanup(data):
    mission, probe, sensor = "a17", "p2", 4

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[[]] += 0b100  # None

    # Flag extreme outliers in T.
    flags[[]] += 0b1000  # None (but noisy)

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data


def a17p2_5_cleanup(data):
    mission, probe, sensor = "a17", "p2", 5

    # Only correct data not already flagged w/ 'missing' value.
    index = np.bitwise_and(data[mission][probe][sensor]["flags"].values, 0b1) == 0

    # Turn the data of interest into a numpy array because they're easier.
    flags = data[mission][probe][sensor]["flags"].loc[index].values

    # Flag extreme outliers in dT.
    flags[[296,]] += 0b100

    # Flag extreme outliers in T.
    flags[[296,]] += 0b1000

    data[mission][probe][sensor].loc[index, "flags"] = flags
    return data
